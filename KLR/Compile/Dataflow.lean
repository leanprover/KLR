/-
# üíª Dataflow Solver ü•≥

This is a file, originally authored by Julia, performing semilattice-join fixpoint
search based dataflow analysis!
In other words, a graph is the carrier for a datum of type `Œ≤` at each node.
These data are expected to follow the constraint `œÑ(Œ≤) ‚â§ Œ≤'`, where `œÑ : Œ≤ ‚Üí Œ≤` is a
node-specific "transition function", `Œ≤'` is any succesor of `Œ≤` in the graph, and `‚â§` is
the semitlattice order.
A "solution" is a set of data over the graph carrier satisfying these constraints.
This file exists to compute such solutions.

note: this file considers only _partial_ correctness. _total_ correctness, i.e. proving
(conditional) termination, has been considered out of scope. In practice, a 'fuel' parameter
to the search loop in `DataflowProblem.solve_to_depth` can be easily set above theoretical
upper bonds on search duration. üòä

## Workflow ü´°

To instantiate the solver in general, for graphs whose nodes are indexed by a type `Œ±`, and
whose data are drawn from a type `Œ≤`, begin by providing an instance of `DataflowProblem Œ± Œ≤`.

```class DataflowProblem (Œ± Œ≤ : Type) ...```

(Note... this involves instantiating several typeclasses, including the most heavyeight:
  `NodeMap Œ±` - which provides the type `‚ü¶Œ±, Œ≤‚üß` of maps from nodes `Œ±` to data `Œ≤`)
(The Class NodeProp Œ±, which provides the structure type `Node Œ±`, fixes
`node_prop : Œ± ‚Üí Prop` that idenitifes the subset of the type `Œ±` corresponding to
nodes in the graph.)

Once a `dataflowProblem : DataflowProblem` is created, call `dataflowProblem.solve`.
```
def DataflowProblem.solve {Œ± Œ≤ : Type} ...
  (DP : DataflowProblem Œ± Œ≤)
  : Option ((ŒΩ : ‚ü¶Œ±, Œ≤‚üß) √ó' I' ŒΩ)
```
This will perform a fuel-based terminating fixpoint search for a dataflow solution ‚úåÔ∏è.
if one is found, then `dataflowProblem.solve = some ‚ü®ŒΩ, ŒΩ_sound‚ü©`, where `ŒΩ` is
the solution and `ŒΩ_sound : Prop` proves its a solution (see `def E` through
 `def I'`) for structure of solution soundness theorems ü¶æ.

## Finite Graph Workflow #Ô∏è‚É£üåéüî¢

When `Node Œ±` is a finite type of size `n`, `‚ü¶Œ±, Œ≤] = Vector Œ≤ n` suffices. This
choice fixes a large amount of the "boilerplate" in `DataflowProblem`. The class
`FiniteSolverInput Œ≤` consists primarily of three fields:
```
structure FiniteSolverInput (Œ≤ : Type) ...
  num_nodes : ‚Ñï
  edges : ‚Ñï ‚Üí ‚Ñï ‚Üí Bool
  transitions : ‚Ñï ‚Üí Œ≤ ‚Üí Œ≤
  ...
```
`num_nodes` is the number of nodes in the graph. `edges` and `transitions` operate on
the on node numbers (`Nat`s less than `num_nodes`). `edges` is a boolean relation
indicating the edge relation, and `transitions` provides the transition functions
`Œ≤ ‚Üí Œ≤` per node. Finally, lightweight soundness conditions on these entries
(`transitions_sound` `le_sound` `le_supl` `le_supr`) must be proved.

Once a `FiniteSolverInput` instance is defined, it can be passed to the function
 `FiniteDataflowProblem` to create a corresponding `DataflowProblem` instance:

```
def FiniteDataflowProblem {Œ≤ : Type} ...
  (FSI : FiniteSolverInput Œ≤)
  : DataflowProblem ‚Ñï Œ≤
```

`DataflowProblem.solve` may then be called on this instance.

## Code by `Section`

`Section Basics`- defines basic `Node`, `NodeProp`, and `NodeMap `definitions.
  Culminates in `DataflowProblem` definition relying on `NodeMap`s.

`Section DataflowProblemSolver` - defines computations and logic on `DataflowProblem`s,
  culminating in `DataflowProblem.solve` definition that provides a solution
  to dataflow problems.

`Section FiniteDataflowProblemSolver` - simplies the process of constructing
  `DataflowProblem`s by proviing the `FiniteSolverInput` class that uses
  `‚Ñï` indexing for nodes, and can be transformed by `FiniteDataflowProblem`
  to a `DataflowProblem`.
-/
import Lean.Data.RBMap

abbrev ‚Ñï := Nat

/-
  The section `Basics` provides the basic typeclasses, structures, and
  notations needed to define `DataflowProblem` - including maps,
  map operations, and operations like `‚â§` and `‚äî` -/
section Basics

  /-
    An instance `_ : NodeProp Œ±` fixes a `node_prop : Œ± ‚Üí Prop` that
    defines the set of nodes (note `Set Œ± := Œ± ‚Üí Prop`) in the carrier
    graph.
  -/
  class NodeProp (Œ± : Type) where
    node_prop : Œ± ‚Üí Prop

  /-
    With a `NodeProp Œ±` in scope, `Node Œ±` is the subtype of `a : Œ±` that
    can prove `node_prop a` (i.e., are indeed nodes in the carrier graph)
  -/
  structure Node (Œ± : Type) [NP : NodeProp Œ±] where
    data : Œ±
    sound : NP.node_prop data

  instance {Œ±} [TSA : ToString Œ±] [NodeProp Œ±]: ToString (Node Œ±) where
    toString := (TSA.toString ¬∑.data)

  instance {Œ±} [BEq Œ±] [NodeProp Œ±]: BEq (Node Œ±) where
    beq a‚ÇÄ a‚ÇÅ := a‚ÇÄ.data == a‚ÇÅ.data

  /-
    In the context of a set of nodes `Node Œ±` fixed by a `NodeProp Œ±`, an
    instance of `NodeMap Œ±` is a constructor for map objects whose domain
    is the nodes of the carrier graph and whose codomain is a datatype `Œ≤`.

    Several utilities, as well as soundness theorems on them including
    two induction principles, are required as well.
  -/
  class NodeMap (Œ± : Type) extends NodeProp Œ± where
    Œº (Œ≤ : Type) : Type -- type of maps
    const {Œ≤} : Œ≤ ‚Üí Œº Œ≤ -- empty instance
    of_func {Œ≤} : (Node Œ± ‚Üí Œ≤) ‚Üí Œº Œ≤ --instance from func
    get {Œ≤} : (Œº Œ≤) ‚Üí Node Œ± ‚Üí Œ≤
    fold {Œ≤ Œ≥} : (Œº Œ≤) ‚Üí ((Node Œ±) ‚Üí Œ≥ ‚Üí Œ≥) ‚Üí Œ≥ ‚Üí Œ≥
    app_unary {Œ≤ Œ≥} : (Œº Œ≤) ‚Üí (Œ≤ ‚Üí Œ≥) ‚Üí (Œº Œ≥)
    app_binary {Œ≤‚ÇÄ Œ≤‚ÇÅ Œ≥} : (Œº Œ≤‚ÇÄ) ‚Üí (Œº Œ≤‚ÇÅ) ‚Üí (Œ≤‚ÇÄ ‚Üí Œ≤‚ÇÅ ‚Üí Œ≥) ‚Üí (Œº Œ≥)

    const_get {Œ≤} (b : Œ≤) a : get (const b) a = b
    of_func_get {Œ≤} (f : Node Œ± ‚Üí Œ≤) a : get (of_func f) a = f a
    of_map_get {Œ≤ Œ≥} Œº (f : Œ≤ ‚Üí Œ≥) a : get (app_unary Œº f) a = f (get Œº a)
    of_app_binary_get {Œ≤‚ÇÄ Œ≤‚ÇÅ Œ≥} Œº‚ÇÄ Œº‚ÇÅ (f : Œ≤‚ÇÄ ‚Üí Œ≤‚ÇÅ ‚Üí Œ≥) a
      : get (app_binary Œº‚ÇÄ Œº‚ÇÅ f) a = f (get Œº‚ÇÄ a) (get Œº‚ÇÅ a)

    fold_ind {Œ≤ Œ≥} {ŒΩ : Œº Œ≤} {Œ≥‚ÇÄ : Œ≥} {acc : (Node Œ±) ‚Üí Œ≥ ‚Üí Œ≥} :
      (P : Œ≥ ‚Üí Prop) ‚Üí
      (P Œ≥‚ÇÄ) ‚Üí
      (‚àÄ a Œ≥, P Œ≥ ‚Üí P (acc a Œ≥)) ‚Üí
      P (fold ŒΩ acc Œ≥‚ÇÄ)

    fold_strong_ind {Œ≤ Œ≥} {ŒΩ : Œº Œ≤} {Œ≥‚ÇÄ : Œ≥} {acc : Node Œ± ‚Üí Œ≥ ‚Üí Œ≥} :
      (P : Node Œ± ‚Üí Œ≥ ‚Üí Prop) ‚Üí
      (‚àÄ a Œ≥‚ÇÄ, P a (acc a Œ≥‚ÇÄ)) ‚Üí
      (‚àÄ a Œ≥‚ÇÄ b, P a Œ≥‚ÇÄ ‚Üí P a (acc b Œ≥‚ÇÄ)) ‚Üí
      (‚àÄ a, P a (fold ŒΩ acc Œ≥‚ÇÄ))

  notation Œº "fold‚ü™" st "," acc "‚ü´" => NodeMap.fold Œº acc st

  instance {Œ± Œ≤ : Type} [ToString Œ±] [ToString Œ≤] [NM:NodeMap Œ±]
    : ToString (NM.Œº Œ≤) where
    toString Œº := NM.fold Œº (fun nd str =>
      str ++ "{" ++ (toString nd.data) ++ ":"
                  ++ (toString (NM.get Œº nd)) ++ "}\n") ""

  infix:90 "‚óÉ" => NodeMap.get

  notation "‚ü™" Œ± "‚Ü¶" b "‚ü´"=> NodeMap.const (Œ±:=Œ±) b

  notation "‚ü¶" Œ±  "," Œ≤ "‚üß" => NodeMap.Œº Œ± Œ≤

  notation Œº "map‚ü™" f "‚ü´" => NodeMap.app_unary Œº f

  notation "of_func‚ü™" f "‚ü´" => NodeMap.of_func f

  notation "map2‚ü™" Œº‚ÇÄ "," Œº‚ÇÅ "," f "‚ü´" => NodeMap.app_binary Œº‚ÇÄ Œº‚ÇÅ f

  instance {Œ± Œ≤ : Type} [NodeMap Œ±] [LE Œ≤] : LE ‚ü¶Œ±, Œ≤‚üß where
    le Œº‚ÇÄ Œº‚ÇÅ := (a : Node Œ±) ‚Üí (Œº‚ÇÄ‚óÉa ‚â§ Œº‚ÇÅ‚óÉa)

  instance {Œ± Œ≤ : Type} [NodeMap Œ±] [Max Œ≤] : Max ‚ü¶Œ±, Œ≤‚üß where
    max Œº‚ÇÄ Œº‚ÇÅ := map2‚ü™Œº‚ÇÄ, Œº‚ÇÅ, (Max.max ¬∑ ¬∑)‚ü´

  infix:100 "‚äî" => Max.max


  instance {Œ± Œ≤ : Type} [NodeMap Œ±] [BEq Œ≤] : BEq ‚ü¶Œ±, Œ≤‚üß where
    beq Œº‚ÇÄ Œº‚ÇÅ := Œº‚ÇÄ fold‚ü™true, (fun a prev => prev ‚àß (Œº‚ÇÄ‚óÉa == Œº‚ÇÅ‚óÉa))‚ü´

  instance {Œ± Œ≤ : Type} [NodeMap Œ±] [ToString Œ±] [ToString Œ≤] : ToString ‚ü¶Œ±, Œ≤‚üß where
    toString Œº := Œº fold‚ü™"", (fun nd repr => repr ++
      "\n{" ++ toString nd.data ++ ": " ++ toString (Œº‚óÉnd) ++ "}")‚ü´

  -- copied from Mathlib for utility
  class Preorder (Œ± : Type) extends LE Œ± where
    le_refl : ‚àÄ a : Œ±, a ‚â§ a
    le_trans : ‚àÄ a b c : Œ±, a ‚â§ b ‚Üí b ‚â§ c ‚Üí a ‚â§ c

  instance (Œ± : Type) [Preorder Œ±] : LE Œ± where
    le := LE.le

  -- An instance `HasBot Œ±` fixes a bottom element (`‚ä•`) of type `Œ±`.
  class HasBot (Œ± : Type) where
    bot : Œ±

  notation "‚ä•" => HasBot.bot

  instance {Œ± Œ≤ : Type} [NodeMap Œ±] [HasBot Œ≤] : HasBot ‚ü¶Œ±, Œ≤‚üß where
    bot :=  NodeMap.const (Œ±:=Œ±) ‚ä•

  instance {Œ± Œ≤ : Type} [NodeMap Œ±] [Preorder Œ≤] : Preorder ‚ü¶Œ± , Œ≤‚üß := {
    le := LE.le
    le_refl := by {
      unfold LE.le instLEŒº
      simp
      intros
      apply Preorder.le_refl
    }
    le_trans := by {
      unfold LE.le instLEŒº
      simp
      intros
      rename_i a b c h‚ÇÄ h‚ÇÅ nd
      apply (Preorder.le_trans (a‚óÉnd) (b‚óÉnd) (c‚óÉnd))
      apply h‚ÇÄ
      apply h‚ÇÅ
    }
  }

  /-
    A `DataflowProblem Œ± Œ≤` extends an map constructor `NodeMap Œ±` with choices of
    `œÑ : ‚ü¶Œ±, (Œ≤ ‚Üí Œ≤)‚üß`, the node-indexed map of transition functions, and
    `œÉ : ‚ü¶Œ±, (List (Node Œ±))‚üß`, the node-indexed map of succesor lists fixing
    the graph topology. Two soundness theorems are requires relating the `‚â§`
    relation `œÑ`, and the `==` relation on `Œ≤` (as provided by their respective
    included typeclasses). The `‚äî` and `‚â§` relations (on `‚ü¶Œ±, Œ≤‚üß`), must also
    be proven.
  -/
  class DataflowProblem (Œ± Œ≤ : Type) extends NodeMap Œ±, Max Œ≤, BEq Œ≤, Preorder Œ≤, HasBot Œ≤
  where
    œÑ : ‚ü¶Œ±, (Œ≤ ‚Üí Œ≤)‚üß -- transition functions
    œÉ : ‚ü¶Œ±, (List (Node Œ±))‚üß -- successor relation

    œÑ_sound (Œ±‚ÇÄ : Node Œ±) (Œ≤‚ÇÄ Œ≤‚ÇÅ : Œ≤) : (Œ≤‚ÇÄ == Œ≤‚ÇÅ) ‚Üí (œÑ‚óÉŒ±‚ÇÄ) Œ≤‚ÇÄ == (œÑ‚óÉŒ±‚ÇÄ) Œ≤‚ÇÅ
    le_sound (Œ≤‚ÇÄ Œ≤‚ÇÅ Œ≤‚ÇÇ : Œ≤) : (Œ≤‚ÇÄ == Œ≤‚ÇÅ) ‚Üí (Œ≤‚ÇÄ ‚â§ Œ≤‚ÇÇ) ‚Üí (Œ≤‚ÇÅ ‚â§ Œ≤‚ÇÇ)

    map_le_supl (ŒΩ‚ÇÄ ŒΩ‚ÇÅ ŒΩ‚ÇÇ : ‚ü¶Œ±, Œ≤‚üß) (h : ŒΩ‚ÇÄ ‚â§ ŒΩ‚ÇÅ) : (ŒΩ‚ÇÄ ‚â§ (ŒΩ‚ÇÅ ‚äî ŒΩ‚ÇÇ))
    map_le_supr (ŒΩ‚ÇÄ ŒΩ‚ÇÅ ŒΩ‚ÇÇ : ‚ü¶Œ±, Œ≤‚üß) (h : ŒΩ‚ÇÄ ‚â§ ŒΩ‚ÇÇ) : (ŒΩ‚ÇÄ ‚â§ (ŒΩ‚ÇÅ ‚äî ŒΩ‚ÇÇ))

end Basics


/-
  The section `DataflowProblemSolver ` is paramterized on an instance of `DataflowProblem Œ± Œ≤`.
  It builds on the definitions of maps `‚ü¶Œ±, Œ≤‚üß` from `NodeMap Œ±`, and on the transition functions
  `œÑ ‚óÉ a` and succesor lists `œÉ ‚óÉ a` for each node `a : Node Œ±` (`‚óÉ` used as notation for map get)
  provided by the `DataflowProblem` to compute a series of utility values, functions, and soundness
  theorems ultimately definiting `DataflowProblem.solve`. This `solve` function performs a fixpoint
  search for a solution to this dataflow problem instance. Its return type :`Option ((ŒΩ : ‚ü¶Œ±, Œ≤‚üß) √ó' I' ŒΩ)`,
  captures that the search may fail, as it iterates only for a maximm of `(depth : ‚Ñï) := 1000` rounds.
  The `some` case, on the other hand, provides `ŒΩ : ‚ü¶Œ±, Œ≤‚üß` - the map from nodes to data `Œ≤` that solves
  the dataflow problem, and a `I' ŒΩ : Prop` - which captures that `ŒΩ` satisfies the dataflow problem.
-/
section DataflowProblemSolver
  variable {Œ± Œ≤ : Type} [BEq Œ±] {DP: DataflowProblem Œ± Œ≤}
  open DataflowProblem

  def ŒΩ‚ÇÄ : ‚ü¶Œ±, (Œ≤ √ó Bool)‚üß := ‚ü™Œ±‚Ü¶(‚ä•, true)‚ü´

  def Œµ (a‚ÇÄ a‚ÇÅ : Node Œ±) : Bool := List.elem a‚ÇÅ (œÉ‚óÉa‚ÇÄ)

  def strip_bools (ŒΩ : ‚ü¶Œ±, (Œ≤ √ó Bool)‚üß) := ŒΩ map‚ü™fun (Œ≤, _)=>Œ≤‚ü´

  def E (P : (Node Œ±) ‚Üí (Node Œ±) ‚Üí Prop) := ‚àÄ (a‚ÇÄ a‚ÇÅ) (_:Œµ a‚ÇÄ a‚ÇÅ), P a‚ÇÄ a‚ÇÅ
  def R (ŒΩ‚ÇÄ : ‚ü¶Œ±, (Œ≤ √ó Bool)‚üß) (ŒΩ‚ÇÅ : ‚ü¶Œ±, Œ≤‚üß) [LE Œ≤]: Prop := E (fun a‚ÇÄ a‚ÇÅ => (ŒΩ‚ÇÄ‚óÉa‚ÇÄ).2 ‚à® (œÑ‚óÉa‚ÇÄ) ((ŒΩ‚ÇÄ‚óÉa‚ÇÄ).1) ‚â§ (ŒΩ‚ÇÅ‚óÉa‚ÇÅ))
  def I (ŒΩ : ‚ü¶Œ±, (Œ≤ √ó Bool)‚üß) : Prop := R ŒΩ (strip_bools ŒΩ)

  def R' (ŒΩ‚ÇÄ ŒΩ‚ÇÅ : ‚ü¶Œ±, Œ≤‚üß) : Prop := E (fun a‚ÇÄ a‚ÇÅ => (œÑ‚óÉa‚ÇÄ) (ŒΩ‚ÇÄ‚óÉa‚ÇÄ) ‚â§ ŒΩ‚ÇÅ‚óÉa‚ÇÅ)
  def I' (ŒΩ : ‚ü¶Œ±, Œ≤‚üß) : Prop := R' ŒΩ ŒΩ

  theorem base_case : @I Œ± Œ≤ _ DP ŒΩ‚ÇÄ := by {
    unfold I R E
    intro Œ±‚ÇÄ Œ±‚ÇÅ edge
    left
    unfold ŒΩ‚ÇÄ
    rw [NodeMap.const_get]
  }

  def Œ¥ (ŒΩ : ‚ü¶Œ±, (Œ≤ √ó Bool)‚üß) (a : Node Œ±) : ‚ü¶Œ±, Œ≤‚üß := -- step
    of_func‚ü™(fun a' => if Œµ a a' then ((œÑ‚óÉa) (ŒΩ‚óÉa).1) else ‚ä•)‚ü´

  def Œî‚ÇÄ (ŒΩ : ‚ü¶Œ±, (Œ≤ √ó Bool)‚üß) : ‚ü¶Œ±, Œ≤‚üß :=
    ŒΩ fold‚ü™ŒΩ map‚ü™(¬∑.1)‚ü´, (fun a ŒΩ‚ÇÄ => if (ŒΩ‚óÉa).2 then ŒΩ‚ÇÄ ‚äî (Œ¥ ŒΩ a) else ŒΩ‚ÇÄ)‚ü´

  def Œî (ŒΩ : ‚ü¶Œ±, (Œ≤ √ó Bool)‚üß) : ‚ü¶Œ±, (Œ≤ √ó Bool)‚üß :=
    let ŒΩ' := Œî‚ÇÄ ŒΩ
    of_func‚ü™fun a => let (Œ≤, Œ≤') := ((ŒΩ‚óÉa).1, (ŒΩ'‚óÉa)); (Œ≤', Œ≤ != Œ≤')‚ü´


  def is_fix (ŒΩ : ‚ü¶Œ±, (Œ≤ √ó Bool)‚üß) : Bool :=
    ŒΩ fold‚ü™true, fun a prior => prior && !(ŒΩ‚óÉa).2 ‚ü´

  section
    open Classical -- this can prolly be proven without contradiction or choice
    omit [BEq Œ±] in theorem is_fix_sound (ŒΩ : ‚ü¶Œ±, (Œ≤ √ó Bool)‚üß)
    : is_fix ŒΩ ‚Üí ‚àÄ a, !(ŒΩ ‚óÉ a).2 := by {
      intro h a
      apply byContradiction
      intro pŒΩ
      simp at pŒΩ
      have h' : is_fix ŒΩ = false := by {
        unfold is_fix
        let acc := fun prior a ‚Ü¶ prior && !(ŒΩ‚óÉa).2
        let P := fun a b ‚Ü¶ (ŒΩ‚óÉa).2 = true ‚Üí b = false
        apply (NodeMap.fold_strong_ind P)<;>try unfold P
        {
          simp
        }
        {
          simp
          intros a b af att
          rw [att] at af
          contradiction
        }
        {
          apply pŒΩ
        }
      }
      rw [h] at h'
      contradiction
  }
  end

  omit [BEq Œ±] in theorem strip_bools_snd (ŒΩ : ‚ü¶Œ±, (Œ≤ √ó Bool)‚üß) (a : Node Œ±)
    : ( (strip_bools ŒΩ)‚óÉa = (ŒΩ‚óÉa).1) := by {
      unfold strip_bools
      rw [NodeMap.of_map_get]
    }

  theorem Œ¥lessŒî (ŒΩ : ‚ü¶Œ±, (Œ≤ √ó Bool)‚üß) (a‚ÇÄ : Node Œ±) (h: (ŒΩ ‚óÉ a‚ÇÄ).2): Œ¥ ŒΩ a‚ÇÄ ‚â§ Œî‚ÇÄ ŒΩ := by {
    let P a ŒΩ‚ÇÄ := (ŒΩ‚óÉa).2 = true ‚Üí Œ¥ ŒΩ a ‚â§ ŒΩ‚ÇÄ
    apply (NodeMap.fold_strong_ind P)<;>try unfold P
    {
      intro a Œ≥‚ÇÄ ha
      rw [ha]
      simp
      apply map_le_supr
      apply Preorder.le_refl
    }
    {
      intro a Œ≥‚ÇÄ b ha ha'
      have h' := (ha ha')
      cases (ŒΩ‚óÉb).2<;>simp
      assumption
      apply map_le_supl; assumption

    }
    assumption
  }

  theorem Œîfpt (ŒΩ : ‚ü¶Œ±, (Œ≤ √ó Bool)‚üß) (a : Node Œ±) (nb_eq:(Œî ŒΩ ‚óÉ a).2 = false)
    : (ŒΩ ‚óÉ a).1 == (Œî ŒΩ ‚óÉ a).1 := by {
      unfold Œî
      simp
      rw [NodeMap.of_func_get]
      simp
      unfold Œî at nb_eq
      simp at nb_eq
      rw [NodeMap.of_func_get] at nb_eq
      simp at nb_eq
      unfold bne at nb_eq
      cases h : (ŒΩ‚óÉa).1 == Œî‚ÇÄ ŒΩ‚óÉa
      {
        rw [h] at nb_eq
        contradiction
      }
      {
        rfl
      }
    }

  theorem Œîmono (ŒΩ : ‚ü¶Œ±, (Œ≤ √ó Bool)‚üß) : (strip_bools ŒΩ) ‚â§ Œî‚ÇÄ ŒΩ := by {
    let P ŒΩ' := (strip_bools ŒΩ) ‚â§ ŒΩ'
    apply NodeMap.fold_ind
    {
      unfold LE.le
      intro a
      rw [NodeMap.of_map_get]
      rw [strip_bools_snd]
      apply Preorder.le_refl
    }
    {
      intro a g h
      cases (ŒΩ‚óÉa).2<;> simp
      assumption
      apply map_le_supl
      assumption
    }
  }

  theorem Œîgrnd (ŒΩ : ‚ü¶Œ±, (Œ≤ √ó Bool)‚üß) : ‚àÄ a, (Œî ŒΩ‚óÉa).1 = (Œî‚ÇÄ ŒΩ ‚óÉ a) := by {
    intro a
    unfold Œî
    simp
    rw [NodeMap.of_func_get]
  }


  theorem Œîlift (ŒΩ : ‚ü¶Œ±, (Œ≤ √ó Bool)‚üß) (a‚ÇÄ a‚ÇÅ : Node Œ±) (edge : Œµ a‚ÇÄ a‚ÇÅ) (h : I ŒΩ)
    : (œÑ‚óÉa‚ÇÄ) (ŒΩ‚óÉa‚ÇÄ).1 ‚â§ (Œî ŒΩ ‚óÉ a‚ÇÅ).1 := by {
      cases b : (ŒΩ‚óÉa‚ÇÄ).2
      {
        have le_fst : (œÑ‚óÉa‚ÇÄ) (ŒΩ‚óÉa‚ÇÄ).1 ‚â§ (ŒΩ‚óÉa‚ÇÅ).1 := by {
          have h' := h a‚ÇÄ a‚ÇÅ edge
          simp at h'
          rw [b] at h'
          simp at h'
          rw [strip_bools_snd] at h'
          assumption
        }
        have le_snd : (ŒΩ‚óÉa‚ÇÅ).1 ‚â§ (Œî‚ÇÄ ŒΩ ‚óÉ a‚ÇÅ) := by {
          have h':= Œîmono ŒΩ a‚ÇÅ
          rw [strip_bools_snd] at h'
          assumption
        }
        rewrite [Œîgrnd]
        exact (@Preorder.le_trans Œ≤ _ _ _ _ le_fst le_snd)
      }
      {
      have le_fst : (œÑ‚óÉa‚ÇÄ) (ŒΩ‚óÉa‚ÇÄ).1 ‚â§ (Œ¥ ŒΩ a‚ÇÄ)‚óÉa‚ÇÅ := by {
        unfold Œ¥
        rw [NodeMap.of_func_get, edge]
        apply Preorder.le_refl
      }
      have le_snd : (Œ¥ ŒΩ a‚ÇÄ)‚óÉa‚ÇÅ ‚â§ (Œî‚ÇÄ ŒΩ ‚óÉ a‚ÇÅ) := by {
        apply Œ¥lessŒî
        assumption
      }
      rewrite [Œîgrnd]
      exact (@Preorder.le_trans Œ≤ _ _ _ _ le_fst le_snd)
    }
  }

  theorem Œîpres (ŒΩ : ‚ü¶Œ±, (Œ≤ √ó Bool)‚üß) (h : I ŒΩ) : I (Œî ŒΩ) := by {
    unfold I R E
    intro a‚ÇÄ a‚ÇÅ edge
    cases Œîstat : (Œî ŒΩ‚óÉa‚ÇÄ).2
    right; {
      {
        rw [strip_bools_snd]
        have Œîrel := Œîlift ŒΩ a‚ÇÄ a‚ÇÅ edge h

        have Œîfpa : (ŒΩ ‚óÉ a‚ÇÄ).1 == (Œî ŒΩ ‚óÉ a‚ÇÄ).1 := by {
          have h' := Œîfpt ŒΩ a‚ÇÄ
          rw [Œîstat] at h'
          simp at h'
          assumption
        }
        have Œîfpa_lift : (œÑ‚óÉa‚ÇÄ) (ŒΩ ‚óÉ a‚ÇÄ).1 == (œÑ‚óÉa‚ÇÄ) (Œî ŒΩ ‚óÉ a‚ÇÄ).1 := by {
          apply œÑ_sound
          exact Œîfpa
        }
        apply le_sound (Œ≤‚ÇÄ:=(œÑ‚óÉa‚ÇÄ) (ŒΩ‚óÉa‚ÇÄ).1) <;> assumption
      }
    }
    left; rfl
  }

  theorem Œîsol (ŒΩ : ‚ü¶Œ±, (Œ≤ √ó Bool)‚üß) (h‚ÇÄ : I ŒΩ) (h‚ÇÅ : is_fix ŒΩ = true)
    : I' (strip_bools ŒΩ) := by {
      unfold I' R' E
      unfold I R E at h‚ÇÄ

      intro a‚ÇÄ a‚ÇÅ edge
      have h‚ÇÄ' := h‚ÇÄ a‚ÇÄ a‚ÇÅ edge
      have h‚ÇÅ' := (is_fix_sound ŒΩ h‚ÇÅ) a‚ÇÄ
      simp at h‚ÇÄ'

      cases h‚ÇÇ : (ŒΩ‚óÉa‚ÇÄ).2
      {
        cases h‚ÇÄ'
        {
          rename_i h‚ÇÉ
          rw [h‚ÇÉ] at h‚ÇÇ
          contradiction
        }
        {
          rw [strip_bools_snd]
          assumption
        }
      }
      {
        rw [h‚ÇÇ] at h‚ÇÅ'
        contradiction
      }
  }

  def DataflowProblem.solve_to_depth {Œ± Œ≤ : Type}
    (depth : ‚Ñï)
    (DP : DataflowProblem Œ± Œ≤)
    [BEq Œ±]
    (ŒΩ : ‚ü¶Œ±, (Œ≤ √ó Bool)‚üß)
    (h : I ŒΩ)
    : Option ((ŒΩ : ‚ü¶Œ±, (Œ≤ √ó Bool)‚üß) √ó' (I ŒΩ) √ó' (is_fix ŒΩ) = true) :=
      match depth with
        | 0 => none
        | Nat.succ depth' =>
          let ŒΩ' := Œî ŒΩ
          let h' := Œîpres ŒΩ h
          if fix : is_fix ŒΩ' then
            some ‚ü®ŒΩ', h', fix‚ü©
          else
            solve_to_depth depth' DP ŒΩ' h'

  def DataflowProblem.solve {Œ± Œ≤ : Type} [BEq Œ±]
    (DP : DataflowProblem Œ± Œ≤)
    : Option ((ŒΩ : ‚ü¶Œ±, Œ≤‚üß) √ó' I' ŒΩ)

    := (DP.solve_to_depth 1000 ŒΩ‚ÇÄ base_case).map (fun ‚ü®ŒΩ, h, fix‚ü© =>
      let ŒΩ' := strip_bools ŒΩ; ‚ü®ŒΩ', Œîsol ŒΩ h fix‚ü©)

end DataflowProblemSolver

/-
  The section `FiniteDataflowProblemSolver` provides a structure type definition
  `FiniteSolverInput Œ≤`, that can be easily instantiated with any graph over
  `num_nodes : ‚Ñï` nodes, with data of type `Œ≤`, as long as the edge relation and
  transition functions can be described by numbered node index. To fully instantiate
  a `FiniteSolverInput`, 4 simple soundness theorems relating largely the relations
  on `Œ≤` must be proved.
  `FiniteDataflowProblem ... FiniteSolverInput Œ≤ ‚Üí DataflowProblem ‚Ñï Œ≤` is the
  key function, lifting a `FiniteSolverInput` to `DataflowProblem` admitting the
  solver function `sound`.
-/
section FiniteDataflowProblemSolver

  variable (n : Nat) -- number of nodes

  infix:90 "‚äî" => Max.max

  structure FiniteSolverInput (Œ≤ : Type)
    [BEq Œ≤]
    [Preorder Œ≤]
    [Max Œ≤]
    [HasBot Œ≤]
  where
    num_nodes : ‚Ñï
    edges : ‚Ñï ‚Üí ‚Ñï ‚Üí Bool
    transitions : ‚Ñï ‚Üí Œ≤ ‚Üí Œ≤

    transitions_sound n (Œ≤‚ÇÄ Œ≤‚ÇÅ : Œ≤) : (Œ≤‚ÇÄ == Œ≤‚ÇÅ) ‚Üí (transitions n) Œ≤‚ÇÄ == (transitions n) Œ≤‚ÇÅ
    le_sound (Œ≤‚ÇÄ Œ≤‚ÇÅ Œ≤‚ÇÇ : Œ≤) : (Œ≤‚ÇÄ == Œ≤‚ÇÅ) ‚Üí (Œ≤‚ÇÄ ‚â§ Œ≤‚ÇÇ) ‚Üí (Œ≤‚ÇÅ ‚â§ Œ≤‚ÇÇ)
    le_supl (Œ≤‚ÇÄ Œ≤‚ÇÅ : Œ≤) : Œ≤‚ÇÄ ‚â§ Max.max Œ≤‚ÇÄ Œ≤‚ÇÅ
    le_supr (Œ≤‚ÇÄ Œ≤‚ÇÅ : Œ≤) : Œ≤‚ÇÅ ‚â§ Max.max Œ≤‚ÇÄ Œ≤‚ÇÅ

  def LtProp : NodeProp ‚Ñï where
    node_prop n' := n' < n

  def NodeT := @Node ‚Ñï (LtProp n)

  def node_to_fin (nd : NodeT n) : (Fin n)
    := {val := @nd.data, isLt := @nd.sound}

  def fin_to_node (fin : Fin n) : (NodeT n)
    := @Node.mk ‚Ñï (LtProp n) fin.val fin.isLt

  def nodes : Vector (NodeT n) n
    := Vector.ofFn (fin_to_node n)

  def vector_fn {Œ≤ : Type} (f : NodeT n ‚Üí Œ≤) : Vector Œ≤ n
    := Vector.ofFn (f ‚àò (fin_to_node n))

  def FiniteNodeProp : NodeProp ‚Ñï := {
      node_prop n' := n' < n
    }

  def FiniteNodeMap : NodeMap ‚Ñï := {
    FiniteNodeProp n with
      Œº Œ≤ := Vector Œ≤ n
      const Œ≤
        := vector_fn n (fun _ => Œ≤)
      of_func f
        := vector_fn n f
      get Œº nd
        := Œº.get (node_to_fin n nd)
      fold _ := (nodes n).toList.foldr
      app_unary Œº f := Vector.map f Œº
      app_binary Œº‚ÇÄ Œº‚ÇÅ f :=
        (nodes n).map (fun nd => f
          (Œº‚ÇÄ.get (node_to_fin n nd))
          (Œº‚ÇÅ.get (node_to_fin n nd)))

      const_get := by {
        intros
        unfold vector_fn Vector.get
        simp
      }
      of_func_get := by {
        intros
        unfold node_to_fin vector_fn Vector.get
        simp
        unfold fin_to_node
        rfl
      }
      of_map_get := by {
        intros
        unfold Vector.map Vector.get
        simp
      }
      of_app_binary_get := by {
        intros Œ≤‚ÇÄ Œ≤‚ÇÅ Œ≥ Œº‚ÇÄ Œº‚ÇÅ f a
        unfold Vector.map Vector.get node_to_fin nodes fin_to_node
        simp
      }

      fold_ind := by {
        intro Œ≤ Œ≥ ŒΩ Œ≥‚ÇÄ acc P h‚ÇÄ h‚ÇÅ
        induction ((nodes n).toList)
        {
          simp
          assumption
        }
        {
          rename_i hd tl Pfld
          simp
          apply h‚ÇÅ
          assumption
        }
      }

      fold_strong_ind := by {
        intro Œ≤ Œ≥ ŒΩ Œ≥‚ÇÄ acc P h‚ÇÄ h‚ÇÅ
        let Q l := ‚àÄ nd ‚àà l, P nd (List.foldr acc Œ≥‚ÇÄ l)
        have h : Q (nodes n).toList := by {
          induction (nodes n).toList<;>unfold Q; simp
          {
            rename_i hd tl Qtl
            intro nd ndin
            cases ndin
            {
              apply h‚ÇÄ
            }
            {
              simp
              apply h‚ÇÅ
              apply Qtl
              assumption
            }
          }
        }
        unfold Q at h
        intro a
        apply h
        simp
        unfold nodes Vector.ofFn
        simp
        cases a
        rename_i d snd
        exists Fin.mk d snd
      }
  }

  def FiniteDataflowProblem {Œ≤ : Type}
    [BEq Œ≤]
    [P:Preorder Œ≤]
    [Max Œ≤]
    [HasBot Œ≤]
    (FSI : FiniteSolverInput Œ≤)
    : DataflowProblem ‚Ñï Œ≤
    := let FNM := FiniteNodeMap n;
      {
      œÑ := vector_fn n (FSI.transitions ¬∑.data)
      œÉ := vector_fn n (fun nd =>
            (nodes n).toList.filter (FSI.edges nd.data ¬∑.data)
          )

      œÑ_sound := by {
        intro Œ±‚ÇÄ Œ≤‚ÇÄ Œ≤‚ÇÅ beq
        unfold vector_fn Vector.ofFn NodeMap.get
        unfold FNM FiniteNodeMap Vector.get fin_to_node node_to_fin
        simp
        apply FSI.transitions_sound
        assumption
      }

      le_sound := FSI.le_sound

      map_le_supl := by {
        unfold LE.le instLEŒº Max.max instMaxŒº
        simp
        intro ŒΩ‚ÇÄ ŒΩ‚ÇÅ ŒΩ‚ÇÇ h a
        unfold NodeMap.app_binary NodeMap.get
        unfold FNM FiniteNodeMap node_to_fin Vector.map Vector.get nodes fin_to_node
        simp
        apply Preorder.le_trans
        {apply h}
        {apply FSI.le_supl}
      }
      map_le_supr := by {
        unfold LE.le instLEŒº Max.max instMaxŒº
        intro ŒΩ‚ÇÄ ŒΩ‚ÇÅ ŒΩ‚ÇÇ h a
        unfold NodeMap.app_binary NodeMap.get FNM
        unfold FiniteNodeMap node_to_fin Vector.map Vector.get nodes fin_to_node
        simp
        apply Preorder.le_trans
        {apply h}
        {apply FSI.le_supr}
      }
    }

section InnerMapImpl
  variable (œÅ) [BEq œÅ] [DecidableEq œÅ] [Preorder œÅ] [DecidableLE œÅ] [Max œÅ] [HasBot œÅ]
  variable (num_nodes num_keys : ‚Ñï)

  def FNM : NodeMap ‚Ñï := (FiniteNodeMap num_keys)

  def FSI : FiniteSolverInput ((FNM num_keys).Œº œÅ) := {
    num_nodes := num_nodes
    edges := sorry
    transitions := sorry

    transitions_sound := sorry
    le_sound := by {

    }
    le_supl := by {

    }
    le_supr := by {

    }
  }

end InnerMapImpl

section RBMapImpl
  variable (Œ≥ œÅ) [Ord Œ≥] [DecidableEq œÅ] [Preorder œÅ] [DecidableLE œÅ] [Max œÅ]
  variable (Œì : List Œ≥)

  abbrev Œº := (Lean.RBMap Œ≥ œÅ Ord.compare)

  instance instBEq : BEq (Œº Œ≥ œÅ) := {
    beq Œº‚ÇÄ Œº‚ÇÅ := Œì.all (fun g ‚Ü¶
      match Œº‚ÇÄ.find? g, Œº‚ÇÅ.find? g with
        | none, none => true
        | none, some _ => false
        | some _, none => false
        | some r‚ÇÄ, some r‚ÇÅ => r‚ÇÄ = r‚ÇÅ)
  }

  instance instPreorder : Preorder (Œº Œ≥ œÅ) := {
    le Œº‚ÇÄ Œº‚ÇÅ := Œì.all (fun g ‚Ü¶
      match Œº‚ÇÄ.find? g, Œº‚ÇÅ.find? g with
        | none, none => true
        | none, some _ => true
        | some _, none => false
        | some r‚ÇÄ, some r‚ÇÅ => r‚ÇÄ ‚â§ r‚ÇÅ)
    le_refl := by {
      simp
      intro Œº‚ÇÄ g hg
      cases (Lean.RBMap.find? Œº‚ÇÄ g)<;> simp
      apply Preorder.le_refl
    }
    le_trans := by {
      simp
      intro Œº‚ÇÄ Œº‚ÇÅ Œº‚ÇÇ le‚ÇÄ‚ÇÅ le‚ÇÅ‚ÇÇ g gŒì
      let le‚ÇÄ‚ÇÅ := le‚ÇÄ‚ÇÅ g gŒì
      let le‚ÇÅ‚ÇÇ := le‚ÇÅ‚ÇÇ g gŒì
      cases h‚ÇÄ : Lean.RBMap.find? Œº‚ÇÄ g <;>
      cases h‚ÇÅ : Lean.RBMap.find? Œº‚ÇÅ g<;>
      cases h‚ÇÇ : Lean.RBMap.find? Œº‚ÇÇ g <;>
      simp<;>
      rw [h‚ÇÄ, h‚ÇÅ] at le‚ÇÄ‚ÇÅ<;>simp at le‚ÇÄ‚ÇÅ<;>
      rw [h‚ÇÅ, h‚ÇÇ] at le‚ÇÅ‚ÇÇ<;>simp at le‚ÇÅ‚ÇÇ
      rename_i r‚ÇÄ r‚ÇÅ r‚ÇÇ
      exact (Preorder.le_trans r‚ÇÄ r‚ÇÅ r‚ÇÇ le‚ÇÄ‚ÇÅ le‚ÇÅ‚ÇÇ)
    }
  }

  instance instMax : Max (Œº Œ≥ œÅ) := {
    max Œº‚ÇÄ Œº‚ÇÅ := Œº‚ÇÄ.mergeBy (fun _ ‚Ü¶ (¬∑‚äî¬∑)) Œº‚ÇÅ
    }
  instance instHasBot : HasBot (Œº Œ≥ œÅ) := {
    bot := Lean.RBMap.empty
  }

  section Prove_find_join
    variable (Œº‚ÇÄ Œº‚ÇÅ : Œº Œ≥ œÅ) (g : Œ≥)
    theorem supl_none : Œº‚ÇÄ.find? g = none ‚Üí (Œº‚ÇÄ‚äîŒº‚ÇÅ).find? g = Œº‚ÇÅ.find? g := by {
      intro h
      unfold Max.max instMax Lean.RBMap.mergeBy Lean.RBMap.fold
      cases hŒº‚ÇÄ : Œº‚ÇÄ
      rename_i nd‚ÇÄ wf‚ÇÄ
      cases hŒº‚ÇÅ : Œº‚ÇÅ
      rename_i nd‚ÇÅ wf‚ÇÅ
      simp
      unfold Lean.RBNode.fold
      induction nd‚ÇÅ <;> simp
      {
        unfold Lean.RBMap.find?
        simp
        have h' : Lean.RBNode.find compare nd‚ÇÄ g = none := by {
          unfold Lean.RBMap.find? at h
          rw [hŒº‚ÇÄ] at h
          simp at h
          exact h
        }
        rw [h']
        unfold Lean.RBNode.find
        trivial
      }
      {

      }
    }
    theorem supr_none : Œº‚ÇÅ.find? g = none ‚Üí (Œº‚ÇÄ‚äîŒº‚ÇÅ).find? g = Œº‚ÇÄ.find? g := sorry
    theorem sup_some : ‚àÄ œÅ‚ÇÄ œÅ‚ÇÅ, Œº‚ÇÄ.find? g = some œÅ‚ÇÄ ‚Üí Œº‚ÇÅ.find? g = some œÅ‚ÇÅ ‚Üí
      (Œº‚ÇÄ‚äîŒº‚ÇÅ).find? g = some (œÅ‚ÇÄ ‚äî œÅ‚ÇÅ) := sorry

    theorem find_join : (Œº‚ÇÄ ‚äî Œº‚ÇÅ).find? g =
      match (Œº‚ÇÄ.find? g, Œº‚ÇÅ.find? g) with
          | (none, none) => none
          | (some œÅ, none)
          | (none, some œÅ) => some œÅ
          | (some œÅ‚ÇÄ, some œÅ‚ÇÅ) => œÅ‚ÇÄ ‚äî œÅ‚ÇÅ := by {
            cases h‚ÇÄ : (Lean.RBMap.find? Œº‚ÇÄ g) <;>
            cases h‚ÇÅ : (Lean.RBMap.find? Œº‚ÇÅ g) <;> simp
            {
              rw [supl_none] <;> assumption
            }
            {
              rw [supl_none] <;> assumption
            }
            {
              rw [supr_none] <;> assumption
            }
            {
              rename_i œÅ‚ÇÄ œÅ‚ÇÅ
              rw [sup_some] <;> assumption
            }
          }

  end Prove_find_join

  variable (num_nodes : ‚Ñï)
  variable (le_supl : ‚àÄ œÅ‚ÇÄ œÅ‚ÇÅ : œÅ, œÅ‚ÇÄ ‚â§ œÅ‚ÇÄ ‚äî œÅ‚ÇÅ)
  variable (le_supr : ‚àÄ œÅ‚ÇÄ œÅ‚ÇÅ : œÅ, œÅ‚ÇÅ ‚â§ œÅ‚ÇÄ ‚äî œÅ‚ÇÅ)

  def SolverInput : @FiniteSolverInput (Œº Œ≥ œÅ)
  (instBEq Œ≥ œÅ Œì) (instPreorder Œ≥ œÅ Œì) (instMax Œ≥ œÅ) (instHasBot Œ≥ œÅ)
        := {
      num_nodes := num_nodes
      edges := sorry
      transitions := sorry

      transitions_sound := sorry
      le_sound := by {
        unfold LE.le BEq.beq instLEOfPreorder instBEq Preorder.toLE instPreorder
        simp
        intro Œº‚ÇÄ Œº‚ÇÅ Œº‚ÇÇ h‚ÇÄ‚ÇÅ h‚ÇÄ‚ÇÇ g gŒì
        let h‚ÇÄ‚ÇÅ := h‚ÇÄ‚ÇÅ g gŒì
        let h‚ÇÄ‚ÇÇ := h‚ÇÄ‚ÇÇ g gŒì
        cases h‚ÇÄ : (Lean.RBMap.find? Œº‚ÇÄ g) <;>
        cases h‚ÇÅ : (Lean.RBMap.find? Œº‚ÇÅ g) <;>
        cases h‚ÇÇ : (Lean.RBMap.find? Œº‚ÇÇ g) <;>
        rw [h‚ÇÄ, h‚ÇÅ] at h‚ÇÄ‚ÇÅ <;> simp at h‚ÇÄ‚ÇÅ <;>
        rw [h‚ÇÄ, h‚ÇÇ] at h‚ÇÄ‚ÇÇ <;> simp at h‚ÇÄ‚ÇÇ
        simp
        rename_i œÅ‚ÇÄ œÅ‚ÇÅ œÅ‚ÇÇ
        rw [‚Üêh‚ÇÄ‚ÇÅ]
        assumption
      }

      le_supl := by {
        unfold LE.le instLEOfPreorder Preorder.toLE instPreorder
        simp
        intro Œº‚ÇÄ Œº‚ÇÅ g gŒì
        cases h‚ÇÄ : Lean.RBMap.find? Œº‚ÇÄ g <;>
        cases h‚ÇÅ : (Lean.RBMap.find? Œº‚ÇÅ g) <;>
        cases h‚ÇÄ‚ÇÅ : Lean.RBMap.find? (Œº‚ÇÄ‚äîŒº‚ÇÅ) g <;> simp <;>
        rw [find_join, h‚ÇÄ, h‚ÇÅ] at h‚ÇÄ‚ÇÅ <;>
        simp at h‚ÇÄ‚ÇÅ <;> rw [‚Üêh‚ÇÄ‚ÇÅ]
        apply Preorder.le_refl
        apply le_supl
        }

      le_supr := by {
        unfold LE.le instLEOfPreorder Preorder.toLE instPreorder
        simp
        intro Œº‚ÇÄ Œº‚ÇÅ g gŒì
        cases h‚ÇÄ : Lean.RBMap.find? Œº‚ÇÄ g <;>
        cases h‚ÇÅ : (Lean.RBMap.find? Œº‚ÇÅ g) <;>
        cases h‚ÇÄ‚ÇÅ : Lean.RBMap.find? (Œº‚ÇÄ‚äîŒº‚ÇÅ) g <;> simp <;>
        rw [find_join, h‚ÇÄ, h‚ÇÅ] at h‚ÇÄ‚ÇÅ <;>
        simp at h‚ÇÄ‚ÇÅ <;> rw [‚Üêh‚ÇÄ‚ÇÅ]
        apply Preorder.le_refl
        apply le_supr
        }
  }

  def solution := (FiniteDataflowProblem num_nodes
    (SolverInput Œ≥ œÅ Œì num_nodes le_supl le_supr)).solve

end RBMapImpl





/-
  This section is a test that relies on Mathlib, to be replaced with one
  that does not as a TBD.
namespace Test_Preds
      def num_nodes := 14

      instance : ToString (Finset ‚Ñï) where
        toString fs :=
          let _ := LtProp num_nodes
        (vector_fn num_nodes (¬∑)).foldl (fun repr nd =>
            if nd.data ‚àà fs then
              repr ++ " " ++ toString nd.data
            else
              repr) ""

      instance {Œ± : Type} [ToString Œ±] : ToString (Option Œ±) where
        toString | none => "none" | some a => toString a

      def FSI
      : FiniteSolverInput (Finset ‚Ñï) := {

        num_nodes := num_nodes

        edges := fun
          | 0 => (¬∑ ‚àà [])
          | 1 => (¬∑ ‚àà [2])
          | 2 => (¬∑ ‚àà [3, 4])
          | 3 => (¬∑ ‚àà [5])
          | 4 => (¬∑ ‚àà [7, 8])
          | 5 => (¬∑ ‚àà [6, 9])
          | 6 => (¬∑ ‚àà [3, 10])
          | 7 => (¬∑ ‚àà [10])
          | 8 => (¬∑ ‚àà [])
          | 9 => (¬∑ ‚àà [])
          | 10 => (¬∑ ‚àà [11, ])
          | 11 => (¬∑ ‚àà [7, 13])
          | 12 => (¬∑ ‚àà [])
          | 13 => (¬∑ ‚àà [])
          | _ => fun _ => false
        transitions n :=
          (insert n ¬∑)



        bot := Finset.empty



        transitions_sound := by {
          unfold BEq.beq instBEqOfDecidableEq
          simp
        }
        le_sound := by {
          unfold BEq.beq instBEqOfDecidableEq
          simp
          intro Œ≤‚ÇÄ Œ≤‚ÇÅ Œ≤‚ÇÇ beq ble
          rw [‚Üêbeq]
          assumption
        }
        le_supl := by simp
        le_supr := by simp
      }

      def xx := (FiniteDataflowProblem num_nodes FSI).solve.map ((¬∑.1))
      #print xx
      #eval! xx
end Test_Preds
-/
