/*
Copyright (c) 2025 Amazon.com, Inc. or its affiliates. All Rights Reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Written by the KLR Contributors (https://github.com/leanprover/KLR)
*/
#pragma once

// This file is automatically generated from KLR.
// Manual edits to this file will be overwritten.

#include "klir_common.hpp"
#include "klir_ast.hpp"

namespace klr {

List<Bool> List_Bool_des(FILE *in);
List<Nat> List_Nat_des(FILE *in);
List<Int> List_Int_des(FILE *in);
List<Float> List_Float_des(FILE *in);
List<String> List_String_des(FILE *in);
Option<Bool> Option_Bool_des(FILE *in);
Option<Nat> Option_Nat_des(FILE *in);
Option<Int> Option_Int_des(FILE *in);
Option<Float> Option_Float_des(FILE *in);
Option<String> Option_String_des(FILE *in);
Option<List<Bool>> Option_List_Bool_des(FILE *in);
Option<List<Nat>> Option_List_Nat_des(FILE *in);
Option<List<Int>> Option_List_Int_des(FILE *in);
Option<List<Float>> Option_List_Float_des(FILE *in);
Option<List<String>> Option_List_String_des(FILE *in);
List<List<Bool>> List_List_Bool_des(FILE *in);
List<List<Nat>> List_List_Nat_des(FILE *in);
List<List<Int>> List_List_Int_des(FILE *in);
List<List<Float>> List_List_Float_des(FILE *in);
List<List<String>> List_List_String_des(FILE *in);
Option<List<List<Bool>>> Option_List_List_Bool_des(FILE *in);
Option<List<List<Nat>>> Option_List_List_Nat_des(FILE *in);
Option<List<List<Int>>> Option_List_List_Int_des(FILE *in);
Option<List<List<Float>>> Option_List_List_Float_des(FILE *in);
Option<List<List<String>>> Option_List_List_String_des(FILE *in);
Ptr<Pos> Pos_des(FILE *in);
Ptr<Immediate> Immediate_des(FILE *in);
Memory Memory_des(FILE *in);
Dtype Dtype_des(FILE *in);
Ptr<Shape> Shape_des(FILE *in);
Ptr<Address> Address_des(FILE *in);
Ptr<TensorName> TensorName_des(FILE *in);
Ptr<Slice> Slice_des(FILE *in);
Ptr<Index> Index_des(FILE *in);
Ptr<AccessBasic> AccessBasic_des(FILE *in);
Ptr<APPair> APPair_des(FILE *in);
Ptr<AccessPattern> AccessPattern_des(FILE *in);
Ptr<ScalarOffset> ScalarOffset_des(FILE *in);
Ptr<BirAccessPattern> BirAccessPattern_des(FILE *in);
Ptr<Access> Access_des(FILE *in);
Ptr<TensorHbm> TensorHbm_des(FILE *in);
Ptr<TensorSram> TensorSram_des(FILE *in);
Ptr<TensorRef> TensorRef_des(FILE *in);
Engine Engine_des(FILE *in);
Ptr<ActivationImm> ActivationImm_des(FILE *in);
Ptr<Operand> Operand_des(FILE *in);
Ptr<DataPattern> DataPattern_des(FILE *in);
AluOp AluOp_des(FILE *in);
DropoutThresholdType DropoutThresholdType_des(FILE *in);
AccumCmd AccumCmd_des(FILE *in);
ActivationFunc ActivationFunc_des(FILE *in);
AffineSelectCmp AffineSelectCmp_des(FILE *in);
DgeComputeOp DgeComputeOp_des(FILE *in);
Ptr<DmaBounds> DmaBounds_des(FILE *in);
MatmulGroupElement MatmulGroupElement_des(FILE *in);
Ptr<IndexMissBehavior> IndexMissBehavior_des(FILE *in);
TensorScalarReverseOps TensorScalarReverseOps_des(FILE *in);
TensorSubDim TensorSubDim_des(FILE *in);
TransposeOps TransposeOps_des(FILE *in);
Ptr<Dropout> Dropout_des(FILE *in);
Ptr<Activate> Activate_des(FILE *in);
Ptr<AffineSelect> AffineSelect_des(FILE *in);
Ptr<DmaCopy> DmaCopy_des(FILE *in);
Ptr<DmaTranspose> DmaTranspose_des(FILE *in);
Ptr<Transpose> Transpose_des(FILE *in);
Ptr<LoadMaskRegister> LoadMaskRegister_des(FILE *in);
Ptr<Shuffle> Shuffle_des(FILE *in);
Ptr<MemSet> MemSet_des(FILE *in);
Ptr<Iota> Iota_des(FILE *in);
Ptr<LoadStationary> LoadStationary_des(FILE *in);
Ptr<MatMul> MatMul_des(FILE *in);
Ptr<LocalGather> LocalGather_des(FILE *in);
Ptr<RangeSelect> RangeSelect_des(FILE *in);
Ptr<ScalarTensorTensor> ScalarTensorTensor_des(FILE *in);
Ptr<CopyPredicated> CopyPredicated_des(FILE *in);
Ptr<TensorTensorScan> TensorTensorScan_des(FILE *in);
Ptr<MatchValueLoad> MatchValueLoad_des(FILE *in);
Ptr<FindIndex8> FindIndex8_des(FILE *in);
Ptr<MatchReplace8> MatchReplace8_des(FILE *in);
Ptr<Max8> Max8_des(FILE *in);
Ptr<BatchNormAggregate> BatchNormAggregate_des(FILE *in);
Ptr<BatchNormStats> BatchNormStats_des(FILE *in);
Ptr<Reciprocal> Reciprocal_des(FILE *in);
Ptr<Copy> Copy_des(FILE *in);
Ptr<TensorReduce> TensorReduce_des(FILE *in);
Ptr<TensorScalar> TensorScalar_des(FILE *in);
Ptr<TensorTensor> TensorTensor_des(FILE *in);
Ptr<NcMatMul> NcMatMul_des(FILE *in);
Ptr<TensorScalarReduce> TensorScalarReduce_des(FILE *in);
Ptr<TensorPartitionReduce> TensorPartitionReduce_des(FILE *in);
Ptr<NcActivate> NcActivate_des(FILE *in);
Ptr<NcAffineSelect> NcAffineSelect_des(FILE *in);
Ptr<NcDmaCopy> NcDmaCopy_des(FILE *in);
Ptr<NcLocalGather> NcLocalGather_des(FILE *in);
Ptr<NcRangeSelect> NcRangeSelect_des(FILE *in);
Ptr<NcScalarTensorTensor> NcScalarTensorTensor_des(FILE *in);
Ptr<NcCopy> NcCopy_des(FILE *in);
Ptr<SelectReduce> SelectReduce_des(FILE *in);
Ptr<SequenceBounds> SequenceBounds_des(FILE *in);
Ptr<SendRecv> SendRecv_des(FILE *in);
Ptr<SendRecvCCE> SendRecvCCE_des(FILE *in);
Ptr<QuantizeMX> QuantizeMX_des(FILE *in);
Ptr<MatMulMX> MatMulMX_des(FILE *in);
Ptr<DmaCompute> DmaCompute_des(FILE *in);
Ptr<CollectiveOp> CollectiveOp_des(FILE *in);
Ptr<Send> Send_des(FILE *in);
Ptr<Recv> Recv_des(FILE *in);
BrCmpOp BrCmpOp_des(FILE *in);
Ptr<TensorLoad> TensorLoad_des(FILE *in);
Ptr<TensorStore> TensorStore_des(FILE *in);
Ptr<RegisterMove> RegisterMove_des(FILE *in);
Ptr<CmpBranch> CmpBranch_des(FILE *in);
Ptr<RegisterAluOp> RegisterAluOp_des(FILE *in);
Ptr<CoreBarrier> CoreBarrier_des(FILE *in);
Ptr<RandomSeed> RandomSeed_des(FILE *in);
Ptr<Rand> Rand_des(FILE *in);
Ptr<Operator> Operator_des(FILE *in);
Ptr<Stmt> Stmt_des(FILE *in);
Ptr<Block> Block_des(FILE *in);
Ptr<Kernel> Kernel_des(FILE *in);
Ptr<SharedConstantFile> SharedConstantFile_des(FILE *in);
Ptr<Edges> Edges_des(FILE *in);
Ptr<LncKernel> LncKernel_des(FILE *in);
List<Ptr<Index>> List_Index_des(FILE *in);
List<Ptr<APPair>> List_APPair_des(FILE *in);
Option<Ptr<ScalarOffset>> Option_ScalarOffset_des(FILE *in);
Option<Ptr<Access>> Option_Access_des(FILE *in);
Option<Dtype> Option_Dtype_des(FILE *in);
List<Ptr<Immediate>> List_Immediate_des(FILE *in);
Option<Ptr<TensorRef>> Option_TensorRef_des(FILE *in);
Option<TensorSubDim> Option_TensorSubDim_des(FILE *in);
Option<Ptr<Operand>> Option_Operand_des(FILE *in);
Option<AluOp> Option_AluOp_des(FILE *in);
Option<Ptr<Immediate>> Option_Immediate_des(FILE *in);
List<Ptr<TensorRef>> List_TensorRef_des(FILE *in);
List<Ptr<Stmt>> List_Stmt_des(FILE *in);
List<Ptr<TensorName>> List_TensorName_des(FILE *in);
List<Ptr<Block>> List_Block_des(FILE *in);
List<List<Ptr<Block>>> List_List_Block_des(FILE *in);
List<Ptr<SharedConstantFile>> List_SharedConstantFile_des(FILE *in);
List<Ptr<Edges>> List_Edges_des(FILE *in);
Ptr<KLRFile> KLRFile_des(FILE *in);
Ptr<KLRMetaData> KLRMetaData_des(FILE *in);
Ptr<Contents> Contents_des(FILE *in);
} // namespace klr
