/*
Copyright (c) 2025 Amazon.com, Inc. or its affiliates. All Rights Reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Paul Govereau, Sean McLaughlin
*/
#pragma once

// This file is automatically generated from KLR.
// Manual edits to this file will be overwritten.

#include "stdc.h"
#include "region.h"
#include "ast_common.h"

// KLR.Core Abstract Syntax

enum Core_Memory {
  Core_Memory_hbm = 1,
  Core_Memory_sbuf,
  Core_Memory_pmem,
  Core_Memory_reg,
};

enum Core_Dtype {
  Core_Dtype_bfloat16 = 1,
  Core_Dtype_float8e3,
  Core_Dtype_float8e4,
  Core_Dtype_float8e5,
  Core_Dtype_float16,
  Core_Dtype_float32,
  Core_Dtype_float32r,
  Core_Dtype_int8,
  Core_Dtype_int16,
  Core_Dtype_int64,
  Core_Dtype_int32,
  Core_Dtype_uint8,
  Core_Dtype_uint16,
  Core_Dtype_uint32,
  Core_Dtype_uint64,
};

struct Core_Shape {
  u32 parDim;
  struct Nat_List *freeDims;
};

struct Core_Address {
  enum Core_Memory memory;
  u32 parSize;
  u32 freeSize;
  u32 parOffset;
  u32 freeOffset;
};

struct Core_TensorName {
  char *name;
  enum Core_Dtype dtype;
  struct Core_Shape *shape;
  struct Core_Address *address;
  u32 freeElements;
  struct Prop parWF;
  struct Prop freeWF;
};

struct Core_Slice {
  u32 l;
  u32 u;
  i32 step;
  struct Prop wf;
};

enum Core_Index_Tag {
  Core_Index_coord = 1,
  Core_Index_slice,
};
struct Core_Index_coord {
  u32 e;
};
struct Core_Index_slice {
  struct Core_Slice *slice;
};
struct Core_Index {
  enum Core_Index_Tag tag;
  union {
    struct Core_Index_coord coord;
    struct Core_Index_slice slice;
  };
};

struct Core_AccessBasic {
  struct Core_TensorName *tensor;
  struct Core_Index_List *indexes;
  struct Prop lenWF;
};

struct Core_APPair {
  i32 step;
  u32 num;
};

struct Core_AccessPattern {
  struct Core_TensorName *tensor;
  u32 parNum;
  struct Core_APPair_List *freePattern;
  u32 offset;
};

enum Core_Access_Tag {
  Core_Access_simple = 1,
  Core_Access_basic,
  Core_Access_pattern,
};
struct Core_Access_simple {
  struct Core_TensorName *tensor;
};
struct Core_Access_basic {
  struct Core_AccessBasic *access;
};
struct Core_Access_pattern {
  struct Core_AccessPattern *access;
};
struct Core_Access {
  enum Core_Access_Tag tag;
  union {
    struct Core_Access_simple simple;
    struct Core_Access_basic basic;
    struct Core_Access_pattern pattern;
  };
};

struct Core_TensorHbm {
  char *name;
  enum Core_Dtype dtype;
  u32 address;
  struct Core_APPair_List *dims;
};

enum Core_ParQuadrant {
  Core_ParQuadrant_par0 = 1,
  Core_ParQuadrant_par32,
  Core_ParQuadrant_par64,
  Core_ParQuadrant_par96,
};

struct Core_TensorSram {
  char *name;
  enum Core_Dtype dtype;
  enum Core_ParQuadrant parQuadrant;
  u32 parDim;
  u32 freeOffset;
  struct Core_APPair_List *freePattern;
};

enum Core_TensorRef_Tag {
  Core_TensorRef_abstract = 1,
  Core_TensorRef_sbuf,
  Core_TensorRef_psum,
  Core_TensorRef_hbm,
  Core_TensorRef_register,
};
struct Core_TensorRef_abstract {
  struct Core_Access *access;
};
struct Core_TensorRef_sbuf {
  struct Core_TensorSram *view;
};
struct Core_TensorRef_psum {
  struct Core_TensorSram *view;
};
struct Core_TensorRef_hbm {
  struct Core_TensorHbm *view;
};
struct Core_TensorRef_register {
  u32 reg;
};
struct Core_TensorRef {
  enum Core_TensorRef_Tag tag;
  union {
    struct Core_TensorRef_abstract abstract;
    struct Core_TensorRef_sbuf sbuf;
    struct Core_TensorRef_psum psum;
    struct Core_TensorRef_hbm hbm;
    struct Core_TensorRef_register r;
  };
};

enum Core_Engine {
  Core_Engine_unassigned = 1,
  Core_Engine_act,
  Core_Engine_dma,
  Core_Engine_dve,
  Core_Engine_pe,
  Core_Engine_pool,
  Core_Engine_sp,
};

enum Core_Immediate_Tag {
  Core_Immediate_register = 1,
  Core_Immediate_pointer,
  Core_Immediate_int,
  Core_Immediate_float,
};
struct Core_Immediate_register {
  u32 reg;
};
struct Core_Immediate_int {
  i32 i;
};
struct Core_Immediate_float {
  f32 f;
};
struct Core_Immediate {
  enum Core_Immediate_Tag tag;
  union {
    struct Core_Immediate_register r;
    struct Core_Immediate_int i;
    struct Core_Immediate_float f;
  };
};

enum Core_ActivationImm_Tag {
  Core_ActivationImm_register = 1,
  Core_ActivationImm_pointer,
  Core_ActivationImm_float,
};
struct Core_ActivationImm_register {
  u32 reg;
};
struct Core_ActivationImm_float {
  f32 f;
};
struct Core_ActivationImm {
  enum Core_ActivationImm_Tag tag;
  union {
    struct Core_ActivationImm_register r;
    struct Core_ActivationImm_float f;
  };
};

struct Core_DataPattern {
  u32 offset;
  struct Core_APPair_List *pattern;
};

enum Core_AluOp {
  Core_AluOp_abs = 1,
  Core_AluOp_add,
  Core_AluOp_arith_shift_left,
  Core_AluOp_arith_shift_right,
  Core_AluOp_average,
  Core_AluOp_bitwise_and,
  Core_AluOp_bitwise_not,
  Core_AluOp_bitwise_or,
  Core_AluOp_bitwise_xor,
  Core_AluOp_bypass,
  Core_AluOp_divide,
  Core_AluOp_is_equal,
  Core_AluOp_is_ge,
  Core_AluOp_is_gt,
  Core_AluOp_is_le,
  Core_AluOp_is_lt,
  Core_AluOp_logical_and,
  Core_AluOp_logical_or,
  Core_AluOp_logical_shift_left,
  Core_AluOp_logical_shift_right,
  Core_AluOp_logical_xor,
  Core_AluOp_max,
  Core_AluOp_min,
  Core_AluOp_mod,
  Core_AluOp_mult,
  Core_AluOp_not_equal,
  Core_AluOp_pow,
  Core_AluOp_rsqrt,
  Core_AluOp_subtract,
};

enum Core_DropoutThresholdType {
  Core_DropoutThresholdType_DropRate = 1,
  Core_DropoutThresholdType_KeepRate,
};

enum Core_AccumCmd {
  Core_AccumCmd_Idle = 1,
  Core_AccumCmd_Zero,
  Core_AccumCmd_Accumulate,
  Core_AccumCmd_ZeroAccumulate,
  Core_AccumCmd_LoadAccumulate,
};

enum Core_ActivationFunc {
  Core_ActivationFunc_abs = 1,
  Core_ActivationFunc_arctan,
  Core_ActivationFunc_copy,
  Core_ActivationFunc_erf,
  Core_ActivationFunc_erf_dx,
  Core_ActivationFunc_exp,
  Core_ActivationFunc_gelu,
  Core_ActivationFunc_gelu_apprx_tanh,
  Core_ActivationFunc_gelu_dx,
  Core_ActivationFunc_log,
  Core_ActivationFunc_mish,
  Core_ActivationFunc_reciprocal,
  Core_ActivationFunc_relu,
  Core_ActivationFunc_rsqrt,
  Core_ActivationFunc_sigmoid,
  Core_ActivationFunc_sign,
  Core_ActivationFunc_silu,
  Core_ActivationFunc_silu_dx,
  Core_ActivationFunc_sin,
  Core_ActivationFunc_softplus,
  Core_ActivationFunc_sqrt,
  Core_ActivationFunc_square,
  Core_ActivationFunc_tanh,
};

enum Core_AffineSelectCmp {
  Core_AffineSelectCmp_GreaterThan = 1,
  Core_AffineSelectCmp_GreaterThanEq,
  Core_AffineSelectCmp_Eq,
  Core_AffineSelectCmp_NotEq,
};

enum Core_DgeComputeOp {
  Core_DgeComputeOp_none = 1,
  Core_DgeComputeOp_add,
};

enum Core_DmaBounds_Tag {
  Core_DmaBounds_disable = 1,
  Core_DmaBounds_enable,
  Core_DmaBounds_reg,
};
struct Core_DmaBounds_reg {
  u32 reg;
};
struct Core_DmaBounds {
  enum Core_DmaBounds_Tag tag;
  union {
    struct Core_DmaBounds_reg reg;
  };
};

enum Core_MatmulGroupElement {
  Core_MatmulGroupElement_first = 1,
  Core_MatmulGroupElement_middle,
  Core_MatmulGroupElement_last,
  Core_MatmulGroupElement_whole,
};

enum Core_IndexMissBehavior_Tag {
  Core_IndexMissBehavior_imm = 1,
  Core_IndexMissBehavior_skip,
};
struct Core_IndexMissBehavior_imm {
  struct Core_Immediate *value;
};
struct Core_IndexMissBehavior {
  enum Core_IndexMissBehavior_Tag tag;
  union {
    struct Core_IndexMissBehavior_imm imm;
  };
};

enum Core_TensorScalarReverseOps {
  Core_TensorScalarReverseOps_none = 1,
  Core_TensorScalarReverseOps_first,
  Core_TensorScalarReverseOps_second,
  Core_TensorScalarReverseOps_both,
};

enum Core_TensorSubDim {
  Core_TensorSubDim_X = 1,
  Core_TensorSubDim_XY,
  Core_TensorSubDim_XYZ,
  Core_TensorSubDim_XYZW,
};

struct Core_Dropout {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
  enum Core_DropoutThresholdType thresholdType;
  struct Core_Immediate *threshold;
};

struct Core_Activate {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
  enum Core_AccumCmd accumulatorCmd;
  enum Core_ActivationFunc activationFunc;
  struct Core_Immediate *scale;
  struct Core_Immediate *bias;
  struct Core_Immediate *imm;
};

struct Core_AffineSelect {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
  enum Core_AffineSelectCmp fillMode;
  u32 fillReg;
  struct Core_DataPattern *maskPattern;
};

struct Core_DmaCopy {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
  enum Core_DgeComputeOp compute_op;
  struct Core_DmaBounds *dstBoundsCheck;
  struct Core_DmaBounds *srcBoundsCheck;
};

struct Core_DmaTranspose {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
};

struct Core_Transpose {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
};

struct Core_LoadMaskRegister {
  u32 regNum;
};

struct Core_Shuffle {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
};

struct Core_MemSet {
  struct Core_TensorRef *dst;
  struct Core_Immediate *value;
  u32 count;
};

struct Core_Iota {
  struct Core_TensorRef *dst;
  struct Core_DataPattern *pattern;
};

struct Core_LoadStationary {
  struct Core_TensorRef *src;
  bool isTranspose;
};

struct Core_MatMul {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *moving;
  enum Core_MatmulGroupElement psumAccumulateFlag;
};

struct Core_LocalGather {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
  struct Core_IndexMissBehavior *indexMissBehavior;
  bool freePoolBuffer;
};

struct Core_RangeSelect {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
  enum Core_AccumCmd reduceCommand;
  enum Core_AluOp reduceOp;
  f32 base;
  f32 fillValue;
  enum Core_AluOp compOp0;
  enum Core_AluOp compOp1;
  struct Core_Immediate *bound0;
  struct Core_Immediate *bound1;
};

struct Core_ScalarTensorTensor {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src0;
  struct Core_TensorRef *src1;
  enum Core_AluOp op0;
  enum Core_AluOp op1;
  enum Core_TensorScalarReverseOps reverseOperands;
  struct Core_Immediate *imm0;
  enum Core_AccumCmd accumulatorCmd;
};

struct Core_CopyPredicated {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
  struct Core_TensorRef *predicate;
};

struct Core_TensorTensorScan {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src0;
  struct Core_TensorRef *src1;
  enum Core_AluOp op0;
  enum Core_AluOp op1;
  enum Core_TensorScalarReverseOps reverseOperands;
  struct Core_Immediate *imm0;
  enum Core_AccumCmd accumulatorCmd;
};

struct Core_MatchValueLoad {
  struct Core_TensorRef *src;
};

struct Core_FindIndex8 {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
};

struct Core_MatchReplace8 {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
  struct Core_Immediate *replaceValue;
};

struct Core_Max8 {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
};

struct Core_BatchNormAggregate {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
};

struct Core_BatchNormStats {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
};

struct Core_Reciprocal {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
};

struct Core_Copy {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
  enum Core_TensorSubDim opDim;
};

struct Core_TensorReduce {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
  enum Core_AluOp op;
  enum Core_TensorSubDim opDim;
  bool negated;
};

struct Core_TensorScalar {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
  struct Core_Immediate *imm0;
  enum Core_AluOp op0;
  struct Core_Immediate *imm1;
  enum Core_AluOp op1;
  enum Core_TensorScalarReverseOps reverse;
};

struct Core_TensorTensor {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src0;
  struct Core_TensorRef *src1;
  enum Core_AluOp op;
};

enum Core_Operator_Tag {
  Core_Operator_activate = 1,
  Core_Operator_affineSelect,
  Core_Operator_batchNormAggregate,
  Core_Operator_batchNormStats,
  Core_Operator_copy,
  Core_Operator_copyPredicated,
  Core_Operator_dmaCopy,
  Core_Operator_dmaTranspose,
  Core_Operator_dropout,
  Core_Operator_findIndex8,
  Core_Operator_iota,
  Core_Operator_loadMaskRegister,
  Core_Operator_loadStationary,
  Core_Operator_localGather,
  Core_Operator_matMul,
  Core_Operator_matchReplace8,
  Core_Operator_matchValueLoad,
  Core_Operator_max8,
  Core_Operator_memSet,
  Core_Operator_rangeSelect,
  Core_Operator_reciprocal,
  Core_Operator_scalarTensorTensor,
  Core_Operator_shuffle,
  Core_Operator_tensorReduce,
  Core_Operator_tensorScalar,
  Core_Operator_tensorTensor,
  Core_Operator_tensorTensorScan,
  Core_Operator_transpose,
};
struct Core_Operator_activate {
  struct Core_Activate *op;
};
struct Core_Operator_affineSelect {
  struct Core_AffineSelect *op;
};
struct Core_Operator_batchNormAggregate {
  struct Core_BatchNormAggregate *op;
};
struct Core_Operator_batchNormStats {
  struct Core_BatchNormStats *op;
};
struct Core_Operator_copy {
  struct Core_Copy *op;
};
struct Core_Operator_copyPredicated {
  struct Core_CopyPredicated *op;
};
struct Core_Operator_dmaCopy {
  struct Core_DmaCopy *op;
};
struct Core_Operator_dmaTranspose {
  struct Core_DmaTranspose *op;
};
struct Core_Operator_dropout {
  struct Core_Dropout *op;
};
struct Core_Operator_findIndex8 {
  struct Core_FindIndex8 *op;
};
struct Core_Operator_iota {
  struct Core_Iota *op;
};
struct Core_Operator_loadMaskRegister {
  struct Core_LoadMaskRegister *op;
};
struct Core_Operator_loadStationary {
  struct Core_LoadStationary *op;
};
struct Core_Operator_localGather {
  struct Core_LocalGather *op;
};
struct Core_Operator_matMul {
  struct Core_MatMul *op;
};
struct Core_Operator_matchReplace8 {
  struct Core_MatchReplace8 *op;
};
struct Core_Operator_matchValueLoad {
  struct Core_MatchValueLoad *op;
};
struct Core_Operator_max8 {
  struct Core_Max8 *op;
};
struct Core_Operator_memSet {
  struct Core_MemSet *op;
};
struct Core_Operator_rangeSelect {
  struct Core_RangeSelect *op;
};
struct Core_Operator_reciprocal {
  struct Core_Reciprocal *op;
};
struct Core_Operator_scalarTensorTensor {
  struct Core_ScalarTensorTensor *op;
};
struct Core_Operator_shuffle {
  struct Core_Shuffle *op;
};
struct Core_Operator_tensorReduce {
  struct Core_TensorReduce *op;
};
struct Core_Operator_tensorScalar {
  struct Core_TensorScalar *op;
};
struct Core_Operator_tensorTensor {
  struct Core_TensorTensor *op;
};
struct Core_Operator_tensorTensorScan {
  struct Core_TensorTensorScan *op;
};
struct Core_Operator_transpose {
  struct Core_Transpose *op;
};
struct Core_Operator {
  enum Core_Operator_Tag tag;
  union {
    struct Core_Operator_activate activate;
    struct Core_Operator_affineSelect affineSelect;
    struct Core_Operator_batchNormAggregate batchNormAggregate;
    struct Core_Operator_batchNormStats batchNormStats;
    struct Core_Operator_copy copy;
    struct Core_Operator_copyPredicated copyPredicated;
    struct Core_Operator_dmaCopy dmaCopy;
    struct Core_Operator_dmaTranspose dmaTranspose;
    struct Core_Operator_dropout dropout;
    struct Core_Operator_findIndex8 findIndex8;
    struct Core_Operator_iota iota;
    struct Core_Operator_loadMaskRegister loadMaskRegister;
    struct Core_Operator_loadStationary loadStationary;
    struct Core_Operator_localGather localGather;
    struct Core_Operator_matMul matMul;
    struct Core_Operator_matchReplace8 matchReplace8;
    struct Core_Operator_matchValueLoad matchValueLoad;
    struct Core_Operator_max8 max8;
    struct Core_Operator_memSet memSet;
    struct Core_Operator_rangeSelect rangeSelect;
    struct Core_Operator_reciprocal reciprocal;
    struct Core_Operator_scalarTensorTensor scalarTensorTensor;
    struct Core_Operator_shuffle shuffle;
    struct Core_Operator_tensorReduce tensorReduce;
    struct Core_Operator_tensorScalar tensorScalar;
    struct Core_Operator_tensorTensor tensorTensor;
    struct Core_Operator_tensorTensorScan tensorTensorScan;
    struct Core_Operator_transpose transpose;
  };
};

enum Core_Value_Tag {
  Core_Value_var = 1,
  Core_Value_bool,
  Core_Value_int,
  Core_Value_float,
  Core_Value_access,
};
struct Core_Value_var {
  char *x;
};
struct Core_Value_bool {
  bool value;
};
struct Core_Value_int {
  i32 value;
};
struct Core_Value_float {
  f32 value;
};
struct Core_Value_access {
  struct Core_Access *a;
};
struct Core_Value {
  enum Core_Value_Tag tag;
  union {
    struct Core_Value_var var;
    struct Core_Value_bool b;
    struct Core_Value_int i;
    struct Core_Value_float f;
    struct Core_Value_access access;
  };
};

struct Core_Keyword {
  char *name;
  struct Core_Value *value;
};

enum Core_Expr_Tag {
  Core_Expr_value = 1,
  Core_Expr_call,
};
struct Core_Expr_value {
  struct Core_Value *v;
};
struct Core_Expr_call {
  char *f;
  struct Core_Value_List *args;
  struct Core_Keyword_List *kwargs;
};
struct Core_Expr {
  enum Core_Expr_Tag tag;
  union {
    struct Core_Expr_value value;
    struct Core_Expr_call call;
  };
};

enum Core_Stmt_Tag {
  Core_Stmt_ret = 1,
  Core_Stmt_assign,
  Core_Stmt_store,
  Core_Stmt_oper,
};
struct Core_Stmt_ret {
  struct Core_Value *v;
};
struct Core_Stmt_assign {
  char *x;
  struct Core_Expr *e;
};
struct Core_Stmt_store {
  struct Core_Access *dst;
  struct Core_Operator *op;
  struct Core_Value_List *args;
};
struct Core_Stmt_oper {
  struct Core_Operator *op;
};
struct Core_Stmt {
  enum Core_Stmt_Tag tag;
  union {
    struct Core_Stmt_ret ret;
    struct Core_Stmt_assign assign;
    struct Core_Stmt_store store;
    struct Core_Stmt_oper oper;
  };
};

struct Core_Kernel {
  char *name;
  struct Core_TensorName_List *inputs;
  struct Core_TensorName_List *outputs;
  struct Core_Stmt_List *body;
};

struct Core_Index_List {
  struct Core_Index_List *next;
  struct Core_Index *index;
};

struct Core_APPair_List {
  struct Core_APPair_List *next;
  struct Core_APPair *appair;
};

struct Core_Value_List {
  struct Core_Value_List *next;
  struct Core_Value *value;
};

struct Core_Keyword_List {
  struct Core_Keyword_List *next;
  struct Core_Keyword *keyword;
};

struct Core_TensorName_List {
  struct Core_TensorName_List *next;
  struct Core_TensorName *tensorname;
};

struct Core_Stmt_List {
  struct Core_Stmt_List *next;
  struct Core_Stmt *stmt;
};
