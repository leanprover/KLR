/*
Copyright (c) 2025 Amazon.com, Inc. or its affiliates. All Rights Reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Paul Govereau, Sean McLaughlin
*/
#pragma once

// This file is automatically generated from KLR.
// Manual edits to this file will be overwritten.

#include "stdc.h"
#include "region.h"
#include "ast_common.h"

// KLR.Core Abstract Syntax

enum Core_Memory {
  Core_Memory_hbm = 1,
  Core_Memory_sbuf,
  Core_Memory_pmem,
  Core_Memory_reg,
};

enum Core_Dtype {
  Core_Dtype_bfloat16 = 1,
  Core_Dtype_float8e3,
  Core_Dtype_float8e4,
  Core_Dtype_float8e5,
  Core_Dtype_float16,
  Core_Dtype_float32,
  Core_Dtype_float32r,
  Core_Dtype_int8,
  Core_Dtype_int16,
  Core_Dtype_int64,
  Core_Dtype_int32,
  Core_Dtype_uint8,
  Core_Dtype_uint16,
  Core_Dtype_uint32,
  Core_Dtype_uint64,
};

struct Core_Shape {
  u32 parDim;
  struct Nat_List *freeDims;
};

struct Core_Address {
  enum Core_Memory memory;
  u32 parSize;
  u32 freeSize;
  u32 parOffset;
  u32 freeOffset;
};

struct Core_TensorSram {
  char *name;
  enum Core_Dtype dtype;
  struct Core_Shape *shape;
  struct Core_Address *address;
  struct Prop parWF;
  struct Prop freeWF;
};

struct Core_Slice {
  u32 l;
  u32 u;
  i32 step;
  struct Prop wf;
};

struct Core_Index {
  enum Core_Index_Tag {
    Core_Index_coord = 1,
    Core_Index_slice,
  } tag;
  union {
    struct Core_Index_coord {
      u32 e;
    } coord;
    struct Core_Index_slice {
      struct Core_Slice *slice;
    } slice;
  };
};

struct Core_AccessBasic {
  struct Core_TensorSram *tensor;
  struct Core_Index_List *indexes;
  struct Prop lenWF;
};

struct Core_APPair {
  i32 step;
  u32 num;
};

struct Core_AccessPattern {
  struct Core_TensorSram *tensor;
  u32 parNum;
  struct Core_APPair_List *freePattern;
  u32 offset;
};

struct Core_Access {
  enum Core_Access_Tag {
    Core_Access_simple = 1,
    Core_Access_basic,
    Core_Access_pattern,
  } tag;
  union {
    struct Core_Access_simple {
      struct Core_TensorSram *tensor;
    } simple;
    struct Core_Access_basic {
      struct Core_AccessBasic *access;
    } basic;
    struct Core_Access_pattern {
      struct Core_AccessPattern *access;
    } pattern;
  };
};

struct Core_TensorHbm {
  enum Core_Dtype dtype;
  u32 address;
  struct Nat_List *shape;
  struct Nat_List *strides;
};

enum Core_ParQuadrant {
  Core_ParQuadrant_par0 = 1,
  Core_ParQuadrant_par32,
  Core_ParQuadrant_par64,
  Core_ParQuadrant_par96,
};

struct Core_TensorView {
  char *name;
  enum Core_Dtype dtype;
  enum Core_ParQuadrant parQuadrant;
  u32 parDim;
  u32 freeOffset;
  struct Core_APPair_List *freePattern;
};

struct Core_TensorRef {
  enum Core_TensorRef_Tag {
    Core_TensorRef_abstract = 1,
    Core_TensorRef_literal,
    Core_TensorRef_register,
  } tag;
  union {
    struct Core_TensorRef_abstract {
      struct Core_Access *access;
    } abstract;
    struct Core_TensorRef_literal {
      struct Core_TensorView *view;
    } literal;
    struct Core_TensorRef_register {
      u32 reg;
    } r;
  };
};

struct Core_TensorArg {
  enum Core_TensorArg_Tag {
    Core_TensorArg_hbm = 1,
    Core_TensorArg_sram,
  } tag;
  union {
    struct Core_TensorArg_hbm {
      struct Core_TensorHbm *tensor;
    } hbm;
    struct Core_TensorArg_sram {
      struct Core_TensorSram *tensor;
    } sram;
  };
};

enum Core_Engine {
  Core_Engine_unassigned = 1,
  Core_Engine_act,
  Core_Engine_dma,
  Core_Engine_dve,
  Core_Engine_pe,
  Core_Engine_pool,
  Core_Engine_sp,
};

struct Core_Immediate {
  enum Core_Immediate_Tag {
    Core_Immediate_register = 1,
    Core_Immediate_pointer,
    Core_Immediate_int,
    Core_Immediate_float,
  } tag;
  union {
    struct Core_Immediate_register {
      u32 reg;
    } r;
    struct Core_Immediate_int {
      i32 i;
    } i;
    struct Core_Immediate_float {
      f32 f;
    } f;
  };
};

struct Core_ActivationImm {
  enum Core_ActivationImm_Tag {
    Core_ActivationImm_register = 1,
    Core_ActivationImm_pointer,
    Core_ActivationImm_float,
  } tag;
  union {
    struct Core_ActivationImm_register {
      u32 reg;
    } r;
    struct Core_ActivationImm_float {
      f32 f;
    } f;
  };
};

struct Core_DataPattern {
  u32 offset;
  struct Core_APPair_List *pattern;
};

enum Core_AluOp {
  Core_AluOp_abs = 1,
  Core_AluOp_add,
  Core_AluOp_arith_shift_left,
  Core_AluOp_arith_shift_right,
  Core_AluOp_average,
  Core_AluOp_bitwise_and,
  Core_AluOp_bitwise_not,
  Core_AluOp_bitwise_or,
  Core_AluOp_bitwise_xor,
  Core_AluOp_bypass,
  Core_AluOp_divide,
  Core_AluOp_is_equal,
  Core_AluOp_is_ge,
  Core_AluOp_is_gt,
  Core_AluOp_is_le,
  Core_AluOp_is_lt,
  Core_AluOp_logical_and,
  Core_AluOp_logical_or,
  Core_AluOp_logical_shift_left,
  Core_AluOp_logical_shift_right,
  Core_AluOp_logical_xor,
  Core_AluOp_max,
  Core_AluOp_min,
  Core_AluOp_mod,
  Core_AluOp_mult,
  Core_AluOp_not_equal,
  Core_AluOp_pow,
  Core_AluOp_rsqrt,
  Core_AluOp_subtract,
};

enum Core_DropoutThresholdType {
  Core_DropoutThresholdType_DropRate = 1,
  Core_DropoutThresholdType_KeepRate,
};

enum Core_AccumCmd {
  Core_AccumCmd_Idle = 1,
  Core_AccumCmd_Zero,
  Core_AccumCmd_Accumulate,
  Core_AccumCmd_ZeroAccumulate,
  Core_AccumCmd_LoadAccumulate,
};

enum Core_ActivationFunc {
  Core_ActivationFunc_abs = 1,
  Core_ActivationFunc_arctan,
  Core_ActivationFunc_copy,
  Core_ActivationFunc_erf,
  Core_ActivationFunc_erf_dx,
  Core_ActivationFunc_exp,
  Core_ActivationFunc_gelu,
  Core_ActivationFunc_gelu_apprx_tanh,
  Core_ActivationFunc_gelu_dx,
  Core_ActivationFunc_log,
  Core_ActivationFunc_mish,
  Core_ActivationFunc_reciprocal,
  Core_ActivationFunc_relu,
  Core_ActivationFunc_rsqrt,
  Core_ActivationFunc_sigmoid,
  Core_ActivationFunc_sign,
  Core_ActivationFunc_silu,
  Core_ActivationFunc_silu_dx,
  Core_ActivationFunc_sin,
  Core_ActivationFunc_softplus,
  Core_ActivationFunc_sqrt,
  Core_ActivationFunc_square,
  Core_ActivationFunc_tanh,
};

enum Core_AffineSelectCmp {
  Core_AffineSelectCmp_GreaterThan = 1,
  Core_AffineSelectCmp_GreaterThanEq,
  Core_AffineSelectCmp_Eq,
  Core_AffineSelectCmp_NotEq,
};

enum Core_DgeComputeOp {
  Core_DgeComputeOp_none = 1,
  Core_DgeComputeOp_add,
};

struct Core_DmaBounds {
  enum Core_DmaBounds_Tag {
    Core_DmaBounds_disable = 1,
    Core_DmaBounds_enable,
    Core_DmaBounds_reg,
  } tag;
  union {
    struct Core_DmaBounds_reg {
      u32 reg;
    } reg;
  };
};

enum Core_MatmulGroupElement {
  Core_MatmulGroupElement_first = 1,
  Core_MatmulGroupElement_middle,
  Core_MatmulGroupElement_last,
};

struct Core_IndexMissBehavior {
  enum Core_IndexMissBehavior_Tag {
    Core_IndexMissBehavior_imm = 1,
    Core_IndexMissBehavior_skip,
  } tag;
  union {
    struct Core_IndexMissBehavior_imm {
      struct Core_Immediate *value;
    } imm;
  };
};

enum Core_TensorScalarReverseOps {
  Core_TensorScalarReverseOps_none = 1,
  Core_TensorScalarReverseOps_first,
  Core_TensorScalarReverseOps_second,
  Core_TensorScalarReverseOps_both,
};

enum Core_TensorSubDim {
  Core_TensorSubDim_X = 1,
  Core_TensorSubDim_XY,
  Core_TensorSubDim_XYZ,
  Core_TensorSubDim_XYZW,
};

struct Core_Dropout {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
  enum Core_DropoutThresholdType thresholdType;
  struct Core_Immediate *threshold;
};

struct Core_Activate {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
  enum Core_AccumCmd accumulatorCmd;
  enum Core_ActivationFunc activationFunc;
  struct Core_Immediate *scale;
  struct Core_Immediate *bias;
  struct Core_Immediate *imm;
};

struct Core_AffineSelect {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
  enum Core_AffineSelectCmp fillMode;
  u32 fillReg;
  struct Core_DataPattern *maskPattern;
};

struct Core_DmaCopy {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
  enum Core_DgeComputeOp compute_op;
  struct Core_DmaBounds *dstBoundsCheck;
  struct Core_DmaBounds *srcBoundsCheck;
};

struct Core_DmaTranspose {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
};

struct Core_Transpose {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
};

struct Core_LoadMaskRegister {
  u32 regNum;
};

struct Core_Shuffle {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
};

struct Core_MemSet {
  struct Core_TensorRef *dst;
  u32 value;
  u32 count;
};

struct Core_Iota {
  struct Core_TensorRef *dst;
  struct Core_DataPattern *pattern;
};

struct Core_LoadStationary {
  struct Core_TensorRef *src;
  bool isTranspose;
};

struct Core_MatMul {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *moving;
  enum Core_MatmulGroupElement psumAccumulateFlag;
};

struct Core_LocalGather {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
  struct Core_IndexMissBehavior *indexMissBehavior;
  bool freePoolBuffer;
};

struct Core_RangeSelect {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
  enum Core_AccumCmd reduceCommand;
  enum Core_AluOp reduceOp;
  f32 base;
  f32 fillValue;
  enum Core_AluOp compOp0;
  enum Core_AluOp compOp1;
  struct Core_Immediate *bound0;
  struct Core_Immediate *bound1;
};

struct Core_ScalarTensorTensor {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src0;
  struct Core_TensorRef *src1;
  enum Core_AluOp op0;
  enum Core_AluOp op1;
  enum Core_TensorScalarReverseOps reverseOperands;
  struct Core_Immediate *imm0;
  enum Core_AccumCmd accumulatorCmd;
};

struct Core_CopyPredicated {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
  struct Core_TensorRef *predicate;
};

struct Core_TensorTensorScan {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src0;
  struct Core_TensorRef *src1;
  enum Core_AluOp op0;
  enum Core_AluOp op1;
  enum Core_TensorScalarReverseOps reverseOperands;
  struct Core_Immediate *imm0;
  enum Core_AccumCmd accumulatorCmd;
};

struct Core_MatchValueLoad {
  struct Core_TensorRef *src;
};

struct Core_FindIndex8 {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
};

struct Core_MatchReplace8 {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
  f32 replaceValue;
};

struct Core_Max8 {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
};

struct Core_BatchNormAggregate {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
};

struct Core_BatchNormStats {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
};

struct Core_Reciprocal {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
};

struct Core_Copy {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
  enum Core_TensorSubDim opDim;
};

struct Core_TensorReduce {
  struct Core_TensorRef *dst;
  struct Core_TensorRef *src;
  enum Core_AluOp op;
  enum Core_TensorSubDim opDim;
  bool negated;
};

struct Core_Operator {
  enum Core_Operator_Tag {
    Core_Operator_Activate = 1,
    Core_Operator_AffineSelect,
    Core_Operator_BatchNormAggregate,
    Core_Operator_BatchNormStats,
    Core_Operator_Copy,
    Core_Operator_CopyPredicated,
    Core_Operator_DmaCopy,
    Core_Operator_DmaTranspose,
    Core_Operator_Dropout,
    Core_Operator_FindIndex8,
    Core_Operator_Iota,
    Core_Operator_LoadMaskRegister,
    Core_Operator_LoadStationary,
    Core_Operator_LocalGather,
    Core_Operator_MatMul,
    Core_Operator_MatchReplace8,
    Core_Operator_MatchValueLoad,
    Core_Operator_Max8,
    Core_Operator_MemSet,
    Core_Operator_RangeSelect,
    Core_Operator_Reciprocal,
    Core_Operator_ScalarTensorTensor,
    Core_Operator_Shuffle,
    Core_Operator_TensorReduce,
    Core_Operator_TensorTensorScan,
    Core_Operator_Transpose,
  } tag;
  union {
    struct Core_Operator_Activate {
      struct Core_Activate *op;
    } Activate;
    struct Core_Operator_AffineSelect {
      struct Core_AffineSelect *op;
    } AffineSelect;
    struct Core_Operator_BatchNormAggregate {
      struct Core_BatchNormAggregate *op;
    } BatchNormAggregate;
    struct Core_Operator_BatchNormStats {
      struct Core_BatchNormStats *op;
    } BatchNormStats;
    struct Core_Operator_Copy {
      struct Core_Copy *op;
    } Copy;
    struct Core_Operator_CopyPredicated {
      struct Core_CopyPredicated *op;
    } CopyPredicated;
    struct Core_Operator_DmaCopy {
      struct Core_DmaCopy *op;
    } DmaCopy;
    struct Core_Operator_DmaTranspose {
      struct Core_DmaTranspose *op;
    } DmaTranspose;
    struct Core_Operator_Dropout {
      struct Core_Dropout *op;
    } Dropout;
    struct Core_Operator_FindIndex8 {
      struct Core_FindIndex8 *op;
    } FindIndex8;
    struct Core_Operator_Iota {
      struct Core_Iota *op;
    } Iota;
    struct Core_Operator_LoadMaskRegister {
      struct Core_LoadMaskRegister *op;
    } LoadMaskRegister;
    struct Core_Operator_LoadStationary {
      struct Core_LoadStationary *op;
    } LoadStationary;
    struct Core_Operator_LocalGather {
      struct Core_LocalGather *op;
    } LocalGather;
    struct Core_Operator_MatMul {
      struct Core_MatMul *op;
    } MatMul;
    struct Core_Operator_MatchReplace8 {
      struct Core_MatchReplace8 *op;
    } MatchReplace8;
    struct Core_Operator_MatchValueLoad {
      struct Core_MatchValueLoad *op;
    } MatchValueLoad;
    struct Core_Operator_Max8 {
      struct Core_Max8 *op;
    } Max8;
    struct Core_Operator_MemSet {
      struct Core_MemSet *op;
    } MemSet;
    struct Core_Operator_RangeSelect {
      struct Core_RangeSelect *op;
    } RangeSelect;
    struct Core_Operator_Reciprocal {
      struct Core_Reciprocal *op;
    } Reciprocal;
    struct Core_Operator_ScalarTensorTensor {
      struct Core_ScalarTensorTensor *op;
    } ScalarTensorTensor;
    struct Core_Operator_Shuffle {
      struct Core_Shuffle *op;
    } Shuffle;
    struct Core_Operator_TensorReduce {
      struct Core_TensorReduce *op;
    } TensorReduce;
    struct Core_Operator_TensorTensorScan {
      struct Core_TensorTensorScan *op;
    } TensorTensorScan;
    struct Core_Operator_Transpose {
      struct Core_Transpose *op;
    } Transpose;
  };
};

struct Core_Value {
  enum Core_Value_Tag {
    Core_Value_var = 1,
    Core_Value_bool,
    Core_Value_int,
    Core_Value_float,
    Core_Value_access,
  } tag;
  union {
    struct Core_Value_var {
      char *x;
    } var;
    struct Core_Value_bool {
      bool value;
    } b;
    struct Core_Value_int {
      i32 value;
    } i;
    struct Core_Value_float {
      f32 value;
    } f;
    struct Core_Value_access {
      struct Core_Access *a;
    } access;
  };
};

struct Core_Keyword {
  char *name;
  struct Core_Value *value;
};

struct Core_Expr {
  enum Core_Expr_Tag {
    Core_Expr_value = 1,
    Core_Expr_call,
  } tag;
  union {
    struct Core_Expr_value {
      struct Core_Value *v;
    } value;
    struct Core_Expr_call {
      char *f;
      struct Core_Value_List *args;
      struct Core_Keyword_List *kwargs;
    } call;
  };
};

struct Core_Stmt {
  enum Core_Stmt_Tag {
    Core_Stmt_ret = 1,
    Core_Stmt_assign,
    Core_Stmt_store,
  } tag;
  union {
    struct Core_Stmt_ret {
      struct Core_Value *v;
    } ret;
    struct Core_Stmt_assign {
      char *x;
      struct Core_Expr *e;
    } assign;
    struct Core_Stmt_store {
      struct Core_Access *dst;
      struct Core_Operator *op;
      struct Core_Value_List *args;
    } store;
  };
};

struct Core_Kernel {
  char *name;
  struct Core_TensorArg_List *inputs;
  struct Core_TensorArg_List *outputs;
  struct Core_Stmt_List *body;
};

struct Core_Index_List {
  struct Core_Index_List *next;
  struct Core_Index *index;
};

struct Core_APPair_List {
  struct Core_APPair_List *next;
  struct Core_APPair *appair;
};

struct Core_Value_List {
  struct Core_Value_List *next;
  struct Core_Value *value;
};

struct Core_Keyword_List {
  struct Core_Keyword_List *next;
  struct Core_Keyword *keyword;
};

struct Core_TensorArg_List {
  struct Core_TensorArg_List *next;
  struct Core_TensorArg *tensorarg;
};

struct Core_Stmt_List {
  struct Core_Stmt_List *next;
  struct Core_Stmt *stmt;
};
