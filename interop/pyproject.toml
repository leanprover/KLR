# See: https://packaging.python.org/en/latest/guides/writing-pyproject-toml/

[build-system]
# Using scikit-build-core so we can use CMake to build the Python C extension module.
# We're using CMake so we can easily do fancy stuff like build
# standalone C tests, in addition to the C extension.
requires = [
  "scikit-build-core>=0.11.4", # 0.11.4 is latest in Brazil as of June 2025
]
build-backend = "scikit_build_core.build"

[project]
name = "klr-lang"
version = "0.0.11"
authors = [
  {name = "Paul Govereau", email = "govereau@amazon.com"},
  {name = "Sean McLaughlin", email = "seanmcl@amazon.com"},
]
description = "Intermediate language for tensor compilers"
readme = "README.md"
license = "Apache-2.0"
keywords = ["trainium", "tpu", "pallas", "triton", "gpu"]

# Note, dependencies here are "abstract" while the same
# lines in requirements.txt are "pinned".
# https://stackoverflow.com/questions/74508024/is-requirements-txt-still-needed-when-using-pyproject-toml
# For now we'll just keep both, but maybe we can drop one or the
# other. requirements.txt is nice to have for installing
# deps from GitHub Actions.
dependencies = [
  "numpy",
]
requires-python = ">= 3.9, < 3.13"

[project.urls]
Repository = "https://github.com/leanprover/KLR"

[tool.pytest.ini_options]
pythonpath = "." # Needed for tests to pass
testpaths = [
  "test",
]

[tool.scikit-build]
# See: https://scikit-build-core.readthedocs.io/en/latest/reference/configs.html

# Build stable ABI wheels, for any version of CPython 3.9+
wheel.py-api = "cp39"

wheel.packages = ["klr"]

# There are lots of files for building the C extension we don't need in the compiled wheel.
# Git-ignore style patterns are supported, so exclude everything by default,
# then specify the things we actually do want.
wheel.exclude = [
  "**/*",
  "!**/*.py",
  "!**/*.so", # compiled extension on Linux/macOS
  "!**/*.pyd", # compiled extension on Windows
]

# scikit-build-core adds everything to sdist (unless it's in the .gitignore).
# This picks up too much stuff by accident, so let's exclude everything and then manually include what we want.
sdist.exclude = [
  "**/*",
]

sdist.include = [
  "klr/",
  "test/",
  "CMakeLists.txt",
  "LICENSE",
  "pyproject.toml",
  "README.md",
]

[project.scripts]
klr = "klr._cli:run_klr"
klr-gather = "klr._cli:gather"

[tool.cibuildwheel]
# Skip unsupported python versions as well as 32-bit platforms, which are not supported anymore.
skip = "pp* *-win32 *-manylinux_i686 *-musllinux_*"
# Let's use a more recent version of the manylinux image for more modern compilers

# Build fails without this when we updated to Lean 4.16.0
#    auditwheel: error: cannot repair "/tmp/cibuildwheel/built_wheel/klr_lang-0.0.7-cp38-cp38-linux_x86_64.whl" to "manylinux2014_x86_64" ABI because of the presence of too-recent versioned symbols. You'll need to compile the wheel on an older toolchain.
# https://github.com/pypa/cibuildwheel/issues/1982
# https://github.com/Blosc/python-blosc2/blob/99525d3141ac802e60b3d7bea4dabd1f2ae92b8f/pyproject.toml#L54-L55
manylinux-x86_64-image = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"
