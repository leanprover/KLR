# NB: All this setuptools stuff took about 1000 hours to figure out so never delete this.
[build-system]
#requires = ["setuptools>=61.0"]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "klr-lang"
version = "0.0.7"
authors = [
  {name = "Paul Govereau", email = "govereau@amazon.com"},
  {name = "Sean McLaughlin", email = "seanmcl@amazon.com"},
]
description = "Intermediate langauge for tensor compilers"
readme = "README.md"
license = { file = "LICENSE" }
keywords = ["trainium", "tpu", "pallas", "triton", "gpu"]

# Note, dependencies here are "abstract" while the same
# lines in requirements.txt are "pinned".
# https://stackoverflow.com/questions/74508024/is-requirements-txt-still-needed-when-using-pyproject-toml
# For now we'll just keep both, but maybe we can drop one or the
# other. requirements.txt is nice to have for installing
# deps from GitHub Actions.
dependencies = [
  "ml_dtypes",
  "numpy",
]
requires-python = ">= 3.8" # cibuildwheel can't seem to handle eariler versions

[project.urls]
Repository = "https://github.com/leanprover/KLR"

[tool.pytest.ini_options]
pythonpath = "." # Needed for tests to pass
testpaths = [
  "test",
]

[tool.setuptools]
packages = ["bin", "klr"] # This field is tequired to have more than 1 top level packages (nki/klr). It's not beautiful but it works.

# Build a fake C file to trick the `build` command to make an arch-specific wheel
# We need this because we hide our `klr` Lean binary in the wheel but Python tools
# don't know about it. I couldn't find another way to stop Python from generating
# a generic `any` wheel.
[[tool.setuptools.ext-modules]]
name = "noop"
sources = ["noop.c"]
